Provides the principal classes and interfaces for the JavaTM Print Service API.
See: Description

Interface Summary 
Interface	Description
AttributeException	
Interface AttributeException is a mixin interface which a subclass of PrintException can implement to report an error condition involving one or more printing attributes that a particular Print Service instance does not support.
CancelablePrintJob	
This interface is used by a printing application to cancel a print job.
Doc	
Interface Doc specifies the interface for an object that supplies one piece of print data for a Print Job.
DocPrintJob	
This interface represents a print job that can print a specified document with a set of job attributes.
FlavorException	
Interface FlavorException is a mixin interface which a subclass of PrintException can implement to report an error condition involving a doc flavor or flavors (class DocFlavor).
MultiDoc	
Interface MultiDoc specifies the interface for an object that supplies more than one piece of print data for a Print Job.
MultiDocPrintJob	
Obtained from a MultiDocPrintService, a MultiDocPrintJob can print a specified collection of documents as a single print job with a set of job attributes.
MultiDocPrintService	
Interface MultiPrintService is the factory for a MultiDocPrintJob.
PrintService	
Interface PrintService is the factory for a DocPrintJob.
URIException	
Interface URIException is a mixin interface which a subclass of PrintException can implement to report an error condition involving a URI address.
Class Summary 
Class	Description
DocFlavor	
Class DocFlavor encapsulates an object that specifies the format in which print data is supplied to a DocPrintJob.
DocFlavor.BYTE_ARRAY	
Class DocFlavor.BYTE_ARRAY provides predefined static constant DocFlavor objects for example doc flavors using a byte array (byte[]) as the print data representation class.
DocFlavor.CHAR_ARRAY	
Class DocFlavor.CHAR_ARRAY provides predefined static constant DocFlavor objects for example doc flavors using a character array (char[]) as the print data representation class.
DocFlavor.INPUT_STREAM	
Class DocFlavor.INPUT_STREAM provides predefined static constant DocFlavor objects for example doc flavors using a byte stream (java.io.InputStream) as the print data representation class.
DocFlavor.READER	
Class DocFlavor.READER provides predefined static constant DocFlavor objects for example doc flavors using a character stream (java.io.Reader) as the print data representation class.
DocFlavor.SERVICE_FORMATTED	
Class DocFlavor.SERVICE_FORMATTED provides predefined static constant DocFlavor objects for example doc flavors for service formatted print data.
DocFlavor.STRING	
Class DocFlavor.STRING provides predefined static constant DocFlavor objects for example doc flavors using a string (java.lang.String) as the print data representation class.
DocFlavor.URL	
Class DocFlavor.URL provides predefined static constant DocFlavor objects.
PrintServiceLookup	
Implementations of this class provide lookup services for print services (typically equivalent to printers) of a particular type.
ServiceUI	
This class is a collection of UI convenience methods which provide a graphical user dialog for browsing print services looked up through the Java Print Service API.
ServiceUIFactory	
Services may optionally provide UIs which allow different styles of interaction in different roles.
SimpleDoc	
This class is an implementation of interface Doc that can be used in many common printing requests.
StreamPrintService	
This class extends PrintService and represents a print service that prints data in different formats to a client-provided output stream.
StreamPrintServiceFactory	
A StreamPrintServiceFactory is the factory for StreamPrintService instances, which can print to an output stream in a particular document format described as a mime type.
Exception Summary 
Exception	Description
PrintException	
Class PrintException encapsulates a printing-related error condition that occurred while using a Print Service instance.
Package javax.print Description

Provides the principal classes and interfaces for the JavaTM Print Service API. The Java Print Service API enables client and server applications to:
Discover and select print services based on their capabilities
Specify the format of print data
Submit print jobs to services that support the document type to be printed.
Print Service Discovery

An application invokes the static methods of the abstract class PrintServiceLookup to locate print services that have the capabilities to satisfy the application's print request. For example, to print a double-sided document, the application first needs to find printers that have the double-sided printing capability.

The JDK includes PrintServiceLookup implementations that can locate the standard platform printers. To locate other types of printers, such as IPP printers or JINI printers, a print-service provider can write implementations of PrintServiceLookup. The print-service provider can dynamically install these PrintServiceLookup implementations using the SPI JAR file specification.

Attribute Definitions

The javax.print.attribute and javax.print.attribute.standard packages define print attributes, which describe the capabilities of a print service, specify the requirements of a print job, and track the progress of a print job.
The javax.print.attribute package describes the types of attributes and how they can be collected into sets. The javax.print.attribute.standard package enumerates all of the standard attributes supported by the API, most of which are implementations of attributes specified in the IETF Specification, RFC 2911 Internet Printing Protocol, 1.1: Model and Semantics, dated September 2000. The attributes specified in javax.print.attribute.standard include common capabilites, such as: resolution, copies, media sizes, job priority, and page ranges.

Document Type Specification

The DocFlavor class represents the print data format, such as JPEG or PostScript. A DocFlavor object consists of a MIME type, which describes the format, and a document representation class name that indicates how the document is delivered to the printer or output stream. An application uses the DocFlavor and an attribute set to find printers that can print the document type specified by the DocFlavor and have the capabilities specified by the attribute set.
Using the API

A typical application using the Java Print Service API performs these steps to process a print request:
Chooses a DocFlavor.
Creates a set of attributes.
Locates a print service that can handle the print request as specified by the DocFlavor and the attribute set.
Creates a Doc object encapsulating the DocFlavor and the actual print data, which can take many forms including: a Postscript file, a JPEG image, a URL, or plain text.
Gets a print job, represented by DocPrintJob, from the print service.
Calls the print method of the print job.
The following code sample demonstrates a typical use of the Java Print Service API: locating printers that can print five double-sided copies of a Postscript document on size A4 paper, creating a print job from one of the returned print services, and calling print.

FileInputStream psStream;
try {
   psStream = new FileInputStream("file.ps");
} catch (FileNotFoundException ffne) {
}
if (psStream == null) {
    return;
}

DocFlavor psInFormat = DocFlavor.INPUT_STREAM.POSTSCRIPT;
Doc myDoc = new SimpleDoc(psStream, psInFormat, null);  
PrintRequestAttributeSet aset = 
        new HashPrintRequestAttributeSet();
aset.add(new Copies(5));
aset.add(MediaSize.A4);
aset.add(Sides.DUPLEX);
PrintService[] services = 
  PrintServiceLookup.lookupPrintServices(psInFormat, aset);
if (services.length > 0) {
   DocPrintJob job = services[0].createPrintJob();
   try {
        job.print(myDoc, aset);
   } catch (PrintException pe) {}
}

Please note: In the javax.print APIs, a null reference parameter to methods is incorrect unless explicitly documented on the method as having a meaningful interpretation. Usage to the contrary is incorrect coding and may result in a run time exception either immediately or at some later time. IllegalArgumentException and NullPointerException are examples of typical and acceptable run time exceptions for such cases.

Since:

Provides for system input and output through data streams, serialization and the file system.
See: Description

Interface Summary 
Interface	Description
Closeable	
A Closeable is a source or destination of data that can be closed.
DataInput	
The DataInput interface provides for reading bytes from a binary stream and reconstructing from them data in any of the Java primitive types.
DataOutput	
The DataOutput interface provides for converting data from any of the Java primitive types to a series of bytes and writing these bytes to a binary stream.
Externalizable	
Only the identity of the class of an Externalizable instance is written in the serialization stream and it is the responsibility of the class to save and restore the contents of its instances.
FileFilter	
A filter for abstract pathnames.
FilenameFilter	
Instances of classes that implement this interface are used to filter filenames.
Flushable	
A Flushable is a destination of data that can be flushed.
ObjectInput	
ObjectInput extends the DataInput interface to include the reading of objects.
ObjectInputValidation	
Callback interface to allow validation of objects within a graph.
ObjectOutput	
ObjectOutput extends the DataOutput interface to include writing of objects.
ObjectStreamConstants	
Constants written into the Object Serialization Stream.
Serializable	
Serializability of a class is enabled by the class implementing the java.io.Serializable interface.
Class Summary 
Class	Description
BufferedInputStream	
A BufferedInputStream adds functionality to another input stream-namely, the ability to buffer the input and to support the mark and reset methods.
BufferedOutputStream	
The class implements a buffered output stream.
BufferedReader	
Reads text from a character-input stream, buffering characters so as to provide for the efficient reading of characters, arrays, and lines.
BufferedWriter	
Writes text to a character-output stream, buffering characters so as to provide for the efficient writing of single characters, arrays, and strings.
ByteArrayInputStream	
A ByteArrayInputStream contains an internal buffer that contains bytes that may be read from the stream.
ByteArrayOutputStream	
This class implements an output stream in which the data is written into a byte array.
CharArrayReader	
This class implements a character buffer that can be used as a character-input stream.
CharArrayWriter	
This class implements a character buffer that can be used as an Writer.
Console	
Methods to access the character-based console device, if any, associated with the current Java virtual machine.
DataInputStream	
A data input stream lets an application read primitive Java data types from an underlying input stream in a machine-independent way.
DataOutputStream	
A data output stream lets an application write primitive Java data types to an output stream in a portable way.
File	
An abstract representation of file and directory pathnames.
FileDescriptor	
Instances of the file descriptor class serve as an opaque handle to the underlying machine-specific structure representing an open file, an open socket, or another source or sink of bytes.
FileInputStream	
A FileInputStream obtains input bytes from a file in a file system.
FileOutputStream	
A file output stream is an output stream for writing data to a File or to a FileDescriptor.
FilePermission	
This class represents access to a file or directory.
FileReader	
Convenience class for reading character files.
FileWriter	
Convenience class for writing character files.
FilterInputStream	
A FilterInputStream contains some other input stream, which it uses as its basic source of data, possibly transforming the data along the way or providing additional functionality.
FilterOutputStream	
This class is the superclass of all classes that filter output streams.
FilterReader	
Abstract class for reading filtered character streams.
FilterWriter	
Abstract class for writing filtered character streams.
InputStream	
This abstract class is the superclass of all classes representing an input stream of bytes.
InputStreamReader	
An InputStreamReader is a bridge from byte streams to character streams: It reads bytes and decodes them into characters using a specified charset.
LineNumberInputStream	Deprecated
This class incorrectly assumes that bytes adequately represent characters.
LineNumberReader	
A buffered character-input stream that keeps track of line numbers.
ObjectInputStream	
An ObjectInputStream deserializes primitive data and objects previously written using an ObjectOutputStream.
ObjectInputStream.GetField	
Provide access to the persistent fields read from the input stream.
ObjectOutputStream	
An ObjectOutputStream writes primitive data types and graphs of Java objects to an OutputStream.
ObjectOutputStream.PutField	
Provide programmatic access to the persistent fields to be written to ObjectOutput.
ObjectStreamClass	
Serialization's descriptor for classes.
ObjectStreamField	
A description of a Serializable field from a Serializable class.
OutputStream	
This abstract class is the superclass of all classes representing an output stream of bytes.
OutputStreamWriter	
An OutputStreamWriter is a bridge from character streams to byte streams: Characters written to it are encoded into bytes using a specified charset.
PipedInputStream	
A piped input stream should be connected to a piped output stream; the piped input stream then provides whatever data bytes are written to the piped output stream.
PipedOutputStream	
A piped output stream can be connected to a piped input stream to create a communications pipe.
PipedReader	
Piped character-input streams.
PipedWriter	
Piped character-output streams.
PrintStream	
A PrintStream adds functionality to another output stream, namely the ability to print representations of various data values conveniently.
PrintWriter	
Prints formatted representations of objects to a text-output stream.
PushbackInputStream	
A PushbackInputStream adds functionality to another input stream, namely the ability to "push back" or "unread" one byte.
PushbackReader	
A character-stream reader that allows characters to be pushed back into the stream.
RandomAccessFile	
Instances of this class support both reading and writing to a random access file.
Reader	
Abstract class for reading character streams.
SequenceInputStream	
A SequenceInputStream represents the logical concatenation of other input streams.
SerializablePermission	
This class is for Serializable permissions.
StreamTokenizer	
The StreamTokenizer class takes an input stream and parses it into "tokens", allowing the tokens to be read one at a time.
StringBufferInputStream	Deprecated
This class does not properly convert characters into bytes.
StringReader	
A character stream whose source is a string.
StringWriter	
A character stream that collects its output in a string buffer, which can then be used to construct a string.
Writer	
Abstract class for writing to character streams.
Exception Summary 
Exception	Description
CharConversionException	
Base class for character conversion exceptions.
EOFException	
Signals that an end of file or end of stream has been reached unexpectedly during input.
FileNotFoundException	
Signals that an attempt to open the file denoted by a specified pathname has failed.
InterruptedIOException	
Signals that an I/O operation has been interrupted.
InvalidClassException	
Thrown when the Serialization runtime detects one of the following problems with a Class.
InvalidObjectException	
Indicates that one or more deserialized objects failed validation tests.
IOException	
Signals that an I/O exception of some sort has occurred.
NotActiveException	
Thrown when serialization or deserialization is not active.
NotSerializableException	
Thrown when an instance is required to have a Serializable interface.
ObjectStreamException	
Superclass of all exceptions specific to Object Stream classes.
OptionalDataException	
Exception indicating the failure of an object read operation due to unread primitive data, or the end of data belonging to a serialized object in the stream.
StreamCorruptedException	
Thrown when control information that was read from an object stream violates internal consistency checks.
SyncFailedException	
Signals that a sync operation has failed.
UnsupportedEncodingException	
The Character Encoding is not supported.
UTFDataFormatException	
Signals that a malformed string in modified UTF-8 format has been read in a data input stream or by any class that implements the data input interface.
WriteAbortedException	
Signals that one of the ObjectStreamExceptions was thrown during a write operation.
Error Summary 
Error	Description
IOError	
Thrown when a serious I/O error has occurred.
Package java.io Description

Provides for system input and output through data streams, serialization and the file system. Unless otherwise noted, passing a null argument to a constructor or method in any class or interface in this package will cause a NullPointerException to be thrown.
Package Specification

Java Object Serialization Specification
Related Documentation

For overviews, tutorials, examples, guides, and tool documentation, please see:
Serialization Enhancements

java.io
Class FileWriter

java.lang.Object
java.io.Writer
java.io.OutputStreamWriter
java.io.FileWriter
All Implemented Interfaces:
Closeable, Flushable, Appendable, AutoCloseable

public class FileWriter
extends OutputStreamWriter
Convenience class for writing character files. The constructors of this class assume that the default character encoding and the default byte-buffer size are acceptable. To specify these values yourself, construct an OutputStreamWriter on a FileOutputStream.
Whether or not a file is available or may be created depends upon the underlying platform. Some platforms, in particular, allow a file to be opened for writing by only one FileWriter (or other file-writing object) at a time. In such situations the constructors in this class will fail if the file involved is already open.

FileWriter is meant for writing streams of characters. For writing streams of raw bytes, consider using a FileOutputStream.

Since:
JDK1.1
See Also:
OutputStreamWriter, FileOutputStream
Field Summary

Fields inherited from class java.io.Writer
lock
Constructor Summary

Constructors 
Constructor and Description
FileWriter(File file)
Constructs a FileWriter object given a File object.
FileWriter(File file, boolean append)
Constructs a FileWriter object given a File object.
FileWriter(FileDescriptor fd)
Constructs a FileWriter object associated with a file descriptor.
FileWriter(String fileName)
Constructs a FileWriter object given a file name.
FileWriter(String fileName, boolean append)
Constructs a FileWriter object given a file name with a boolean indicating whether or not to append the data written.
Method Summary

Methods inherited from class java.io.OutputStreamWriter
close, flush, getEncoding, write, write, write
Methods inherited from class java.io.Writer
append, append, append, write, write
Methods inherited from class java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait
Constructor Detail

FileWriter
public FileWriter(String fileName)
           throws IOException
Constructs a FileWriter object given a file name.
Parameters:
fileName - String The system-dependent filename.
Throws:
IOException - if the named file exists but is a directory rather than a regular file, does not exist but cannot be created, or cannot be opened for any other reason
FileWriter
public FileWriter(String fileName,
          boolean append)
           throws IOException
Constructs a FileWriter object given a file name with a boolean indicating whether or not to append the data written.
Parameters:
fileName - String The system-dependent filename.
append - boolean if true, then data will be written to the end of the file rather than the beginning.
Throws:
IOException - if the named file exists but is a directory rather than a regular file, does not exist but cannot be created, or cannot be opened for any other reason
FileWriter
public FileWriter(File file)
           throws IOException
Constructs a FileWriter object given a File object.
Parameters:
file - a File object to write to.
Throws:
IOException - if the file exists but is a directory rather than a regular file, does not exist but cannot be created, or cannot be opened for any other reason
FileWriter
public FileWriter(File file,
          boolean append)
           throws IOException
Constructs a FileWriter object given a File object. If the second argument is true, then bytes will be written to the end of the file rather than the beginning.
Parameters:
file - a File object to write to
append - if true, then bytes will be written to the end of the file rather than the beginning
Throws:
IOException - if the file exists but is a directory rather than a regular file, does not exist but cannot be created, or cannot be opened for any other reason
Since:
1.4
FileWriter
public FileWriter(FileDescriptor fd)
Constructs a FileWriter object associated with a file descriptor.
Parameters:
fd - FileDescriptor object to write to.

See Also:
File, FileDescriptor, FileOutputStream, Files.newInputStream(java.nio.file.Path, java.nio.file.OpenOption...)
Constructor Summary

Constructors 
Constructor and Description
FileInputStream(File file)
Creates a FileInputStream by opening a connection to an actual file, the file named by the File object file in the file system.
FileInputStream(FileDescriptor fdObj)
Creates a FileInputStream by using the file descriptor fdObj, which represents an existing connection to an actual file in the file system.
FileInputStream(String name)
Creates a FileInputStream by opening a connection to an actual file, the file named by the path name name in the file system.
Method Summary

Methods 
Modifier and Type	Method and Description
int	available()
Returns an estimate of the number of remaining bytes that can be read (or skipped over) from this input stream without blocking by the next invocation of a method for this input stream.
void	close()
Closes this file input stream and releases any system resources associated with the stream.
protected void	finalize()
Ensures that the close method of this file input stream is called when there are no more references to it.
FileChannel	getChannel()
Returns the unique FileChannel object associated with this file input stream.
FileDescriptor	getFD()
Returns the FileDescriptor object that represents the connection to the actual file in the file system being used by this FileInputStream.
int	read()
Reads a byte of data from this input stream.
int	read(byte[] b)
Reads up to b.length bytes of data from this input stream into an array of bytes.
int	read(byte[] b, int off, int len)
Reads up to len bytes of data from this input stream into an array of bytes.
long	skip(long n)
Skips over and discards n bytes of data from the input stream.
Methods inherited from class java.io.InputStream
mark, markSupported, reset
Methods inherited from class java.lang.Object
clone, equals, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait
Constructor Detail

FileInputStream
public FileInputStream(String name)
                throws FileNotFoundException
Creates a FileInputStream by opening a connection to an actual file, the file named by the path name name in the file system. A new FileDescriptor object is created to represent this file connection.
First, if there is a security manager, its checkRead method is called with the name argument as its argument.

If the named file does not exist, is a directory rather than a regular file, or for some other reason cannot be opened for reading then a FileNotFoundException is thrown.

Parameters:
name - the system-dependent file name.
Throws:
FileNotFoundException - if the file does not exist, is a directory rather than a regular file, or for some other reason cannot be opened for reading.
SecurityException - if a security manager exists and its checkRead method denies read access to the file.
See Also:
SecurityManager.checkRead(java.lang.String)
FileInputStream
public FileInputStream(File file)
                throws FileNotFoundException
Creates a FileInputStream by opening a connection to an actual file, the file named by the File object file in the file system. A new FileDescriptor object is created to represent this file connection.
First, if there is a security manager, its checkRead method is called with the path represented by the file argument as its argument.

If the named file does not exist, is a directory rather than a regular file, or for some other reason cannot be opened for reading then a FileNotFoundException is thrown.

Parameters:
file - the file to be opened for reading.
Throws:
FileNotFoundException - if the file does not exist, is a directory rather than a regular file, or for some other reason cannot be opened for reading.
SecurityException - if a security manager exists and its checkRead method denies read access to the file.
See Also:
File.getPath(), SecurityManager.checkRead(java.lang.String)
FileInputStream
public FileInputStream(FileDescriptor fdObj)
Creates a FileInputStream by using the file descriptor fdObj, which represents an existing connection to an actual file in the file system.
If there is a security manager, its checkRead method is called with the file descriptor fdObj as its argument to see if it's ok to read the file descriptor. If read access is denied to the file descriptor a SecurityException is thrown.

If fdObj is null then a NullPointerException is thrown.

This constructor does not throw an exception if fdObj is invalid. However, if the methods are invoked on the resulting stream to attempt I/O on the stream, an IOException is thrown.

Parameters:
fdObj - the file descriptor to be opened for reading.
Throws:
SecurityException - if a security manager exists and its checkRead method denies read access to the file descriptor.
See Also:
SecurityManager.checkRead(java.io.FileDescriptor)
Method Detail

read
public int read()
         throws IOException
Reads a byte of data from this input stream. This method blocks if no input is yet available.
Specified by:
read in class InputStream
Returns:
the next byte of data, or -1 if the end of the file is reached.
Throws:
IOException - if an I/O error occurs.
read
public int read(byte[] b)
         throws IOException
Reads up to b.length bytes of data from this input stream into an array of bytes. This method blocks until some input is available.
Overrides:
read in class InputStream
Parameters:
b - the buffer into which the data is read.
Returns:
the total number of bytes read into the buffer, or -1 if there is no more data because the end of the file has been reached.
Throws:
IOException - if an I/O error occurs.
See Also:
InputStream.read(byte[], int, int)
read
public int read(byte[] b,
       int off,
       int len)
         throws IOException
Reads up to len bytes of data from this input stream into an array of bytes. If len is not zero, the method blocks until some input is available; otherwise, no bytes are read and 0 is returned.
Overrides:
read in class InputStream
Parameters:
b - the buffer into which the data is read.
off - the start offset in the destination array b
len - the maximum number of bytes read.
Returns:
the total number of bytes read into the buffer, or -1 if there is no more data because the end of the file has been reached.
Throws:
NullPointerException - If b is null.
IndexOutOfBoundsException - If off is negative, len is negative, or len is greater than b.length - off
IOException - if an I/O error occurs.
See Also:
InputStream.read()
skip
public long skip(long n)
          throws IOException
Skips over and discards n bytes of data from the input stream.
The skip method may, for a variety of reasons, end up skipping over some smaller number of bytes, possibly 0. If n is negative, an IOException is thrown, even though the skip method of the InputStream superclass does nothing in this case. The actual number of bytes skipped is returned.

This method may skip more bytes than are remaining in the backing file. This produces no exception and the number of bytes skipped may include some number of bytes that were beyond the EOF of the backing file. Attempting to read from the stream after skipping past the end will result in -1 indicating the end of the file.

Overrides:
skip in class InputStream
Parameters:
n - the number of bytes to be skipped.
Returns:
the actual number of bytes skipped.
Throws:
IOException - if n is negative, if the stream does not support seek, or if an I/O error occurs.
available
public int available()
              throws IOException
Returns an estimate of the number of remaining bytes that can be read (or skipped over) from this input stream without blocking by the next invocation of a method for this input stream. The next invocation might be the same thread or another thread. A single read or skip of this many bytes will not block, but may read or skip fewer bytes.
In some cases, a non-blocking read (or skip) may appear to be blocked when it is merely slow, for example when reading large files over slow networks.

Overrides:
available in class InputStream
Returns:
an estimate of the number of remaining bytes that can be read (or skipped over) from this input stream without blocking.
Throws:
IOException - if this file input stream has been closed by calling close or an I/O error occurs.
close
public void close()
           throws IOException
Closes this file input stream and releases any system resources associated with the stream.
If this stream has an associated channel then the channel is closed as well.

Specified by:
close in interface Closeable
Specified by:
close in interface AutoCloseable
Overrides:
close in class InputStream
Throws:
IOException - if an I/O error occurs.
getFD
public final FileDescriptor getFD()
                           throws IOException
Returns the FileDescriptor object that represents the connection to the actual file in the file system being used by this FileInputStream.
Returns:
the file descriptor object associated with this stream.
Throws:
IOException - if an I/O error occurs.
See Also:
FileDescriptor
getChannel
public FileChannel getChannel()
Returns the unique FileChannel object associated with this file input stream.
The initial position of the returned channel will be equal to the number of bytes read from the file so far. Reading bytes from this stream will increment the channel's position. Changing the channel's position, either explicitly or by reading, will change this stream's file position.

Returns:
the file channel associated with this file input stream
Since:
1.4
finalize
protected void finalize()
                 throws IOException
Ensures that the close method of this file input stream is called when there are no more references to it.
Overrides:
finalize in class Object
Throws:
IOException - if an I/O error occurs.
See Also:
close()