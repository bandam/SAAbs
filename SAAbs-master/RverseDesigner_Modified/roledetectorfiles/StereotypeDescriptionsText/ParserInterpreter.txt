Provides classes allowing the processing of XML documents.
See: Description

Class Summary 
Class	Description
DocumentBuilder	
Defines the API to obtain DOM Document instances from an XML document.
DocumentBuilderFactory	
Defines a factory API that enables applications to obtain a parser that produces DOM object trees from XML documents.
SAXParser	
Defines the API that wraps an XMLReader implementation class.
SAXParserFactory	
Defines a factory API that enables applications to configure and obtain a SAX based parser to parse XML documents.
Exception Summary 
Exception	Description
ParserConfigurationException	
Indicates a serious configuration error.
Error Summary 
Error	Description
FactoryConfigurationError	
Thrown when a problem with configuration with the Parser Factories exists.
Package javax.xml.parsers Description

Provides classes allowing the processing of XML documents. Two types of plugable parsers are supported:

SAX (Simple API for XML)
DOM (Document Object Model)


Overview 	 Package 	Class 	Use 	Tree 	Deprecated 	Index 	Help 
Java™ Platform
Standard Ed. 6
 PREV PACKAGE   NEXT PACKAGE	FRAMES    NO FRAMES    All Classes
Package javax.script

The scripting API consists of interfaces and classes that define Java TM Scripting Engines and provides a framework for their use in Java applications.
See: 
          Description

Interface Summary
Bindings	A mapping of key/value pairs, all of whose keys are Strings.
Compilable	The optional interface implemented by ScriptEngines whose methods compile scripts to a form that can be executed repeatedly without recompilation.
Invocable	The optional interface implemented by ScriptEngines whose methods allow the invocation of procedures in scripts that have previously been executed.
ScriptContext	The interface whose implementing classes are used to connect Script Engines with objects, such as scoped Bindings, in hosting applications.
ScriptEngine	ScriptEngine is the fundamental interface whose methods must be fully functional in every implementation of this specification.
ScriptEngineFactory	ScriptEngineFactory is used to describe and instantiate ScriptEngines.
 
Class Summary
AbstractScriptEngine	Provides a standard implementation for several of the variants of the eval method.
CompiledScript	Extended by classes that store results of compilations.
ScriptEngineManager	The ScriptEngineManager implements a discovery and instantiation mechanism for ScriptEngine classes and also maintains a collection of key/value pairs storing state shared by all engines created by the Manager.
SimpleBindings	A simple implementation of Bindings backed by a HashMap or some other specified Map.
SimpleScriptContext	Simple implementation of ScriptContext.
 
Exception Summary
ScriptException	The generic Exception class for the Scripting APIs.
 

Package javax.script Description

The scripting API consists of interfaces and classes that define Java TM Scripting Engines and provides a framework for their use in Java applications. This API is intended for use by application programmers who wish to execute programs written in scripting languages in their Java applications. The scripting language programs are usually provided by the end-users of the applications.

The main areas of functionality of javax.script package include

Script execution: Scripts are streams of characters used as sources for programs executed by script engines. Script execution uses eval methods of ScriptEngine and methods of the Invocable interface.

Binding: This facility allows Java objects to be exposed to script programs as named variables. Bindings and ScriptContext classes are used for this purpose.

Compilation: This functionality allows the intermediate code generated by the front-end of a script engine to be stored and executed repeatedly. This benefits applications that execute the same script multiple times. These applications can gain efficiency since the engines' front-ends only need to execute once per script rather than once per script execution. Note that this functionality is optional and script engines may choose not to implement it. Callers need to check for availability of the Compilable interface using an instanceof check.

Invocation: This functionality allows the reuse of intermediate code generated by a script engine's front-end. Whereas Compilation allows entire scripts represented by intermediate code to be re-executed, Invocation functionality allows individual procedures/methods in the scripts to be re-executed. As in the case with compilation, not all script engines are required to provide this facility. Caller has to check for Invocable availability.

Script engine discovery and Metadata: Applications written to the Scripting API might have specific requirements on script engines. Some may require a specific scripting language and/or version while others may require a specific implementation engine and/or version. Script engines are packaged in a specified way so that engines can be discovered at runtime and queried for attributes. The Engine discovery mechanism is based on the Service discovery mechanism described in the Jar File Specification. Script engine implementing classes are packaged in jar files that include a text resource named META-INF/services/javax.script.ScriptEngineFactory. This resource must include a line for each ScriptEngineFactory that is packaged in the jar file. ScriptEngineManager includes getEngineFactories method to get all ScriptEngineFactory instances discovered using this mechanism. ScriptEngineFactory has methods to query attributes about script engine.

Since:
1.6
Overview 	 Package 	Class 	Use 	Tree 	Deprecated 	Index 	Help 
Java™ Platform
Standard Ed. 6
 PREV PACKAGE   NEXT PACKAGE	FRAMES    NO FRAMES    All Classes
Submit a bug or feature
For further API reference and developer documentation, see Java SE Developer Documentation. That documentation contains more detailed, developer-targeted descriptions, with conceptual overviews, definitions of terms, workarounds, and working code examples.
Copyright © 1993, 2011, Oracle and/or its affiliates. All rights reserved.
Java API for JSON Processing: An Introduction to JSON
by Jitendra Kotamraju

The Java API for JSON Processing provides portable APIs to parse, generate, transform, and query JSON.

Published July 2013

JSON (JavaScript Object Notation) is a lightweight, text-based, language-independent data exchange format that is easy for humans and machines to read and write. JSON can represent two structured types: objects and arrays. An object is an unordered collection of zero or more name/value pairs. An array is an ordered sequence of zero or more values. The values can be strings, numbers, booleans, null, and these two structured types.

Listing 1 is an example from Wikipedia that shows the JSON representation of an object that describes a person. The object has string values for first name and last name, a number value for age, an object value representing the person's address, and an array value of phone number objects.

{
    "firstName": "John",
    "lastName": "Smith",
    "age": 25,
    "address": {
        "streetAddress": "21 2nd Street",
        "city": "New York",
        "state": "NY",
        "postalCode": 10021
    },
    "phoneNumbers": [
        {
            "type": "home",
            "number": "212 555-1234"
        },
        {
            "type": "fax",
            "number": "646 555-4567" 
        }
    ] 
}
Listing 1. Example of JSON representation of an object

JSON is often used in Ajax applications, configurations, databases, and RESTful web services. All popular websites offer JSON as the data exchange format with their RESTful web services.

JSON Processing
The Java API for JSON Processing (JSR 353) provides portable APIs to parse, generate, transform, and query JSON using object model and streaming APIs.

The object model API creates a random-access, tree-like structure that represents the JSON data in memory. The tree can then be navigated and queried. This programming model is the most flexible and enables processing that requires random access to the complete contents of the tree. However, it is often not as efficient as the streaming model and requires more memory.

The streaming API provides a way to parse and generate JSON in a streaming fashion. It hands over parsing and generation control to the programmer. The streaming API provides an event-based parser and allows an application developer to ask for the next event rather than handling the event in a callback. This gives a developer more procedural control over the JSON processing. Application code can process or discard the parser event and ask for the next event (pull the event). The streaming model is adequate for local processing where random access of other parts of the data is not required. Similarly, the streaming API provides a way to generate well-formed JSON to a stream by writing one event at a time.

The Object Model API
The object model API is similar to the Document Object Model (DOM) API for XML. It is a high-level API that provides immutable object models for JSON object and array structures. These JSON structures are represented as object models using the Java types JsonObject and JsonArray. Table 1 lists the main classes and interfaces in the object model API.

JsonObject provides a Map view to access the unordered collection of zero or more name/value pairs from the model. Similarly, JsonArray provides a List view to access the ordered sequence of zero or more values from the model.

Table 1. Main classes in the object model API
Class or Interface	Description
Json	Contains static methods to create JSON readers, writers, builders, and their factory objects.
JsonGenerator	Writes JSON data to a stream one value at a time.
JsonReader	Reads JSON data from a stream and creates an object model in memory.
JsonObjectBuilder
JsonArrayBuilder	Create an object model or an array model in memory by adding values from application code.
JsonWriter	Writes an object model from memory to a stream.
JsonValue
JsonObject
JsonArray
JsonString
JsonNumber	Represent data types for values in JSON data.

JsonObject, JsonArray, JsonString, and JsonNumber are subtypes of JsonValue. These are constants defined in the API for null, true, and false JSON values.

The object model API uses builder patterns to create these object models from scratch. Application code can use the interface JsonObjectBuilder to create models that represent JSON objects. The resulting model is of type JsonObject. Application code can use the interface JsonArrayBuilder to create models that represent JSON arrays. The resulting model is of type JsonArray.

These object models can also be created from an input source (such as InputStream or Reader) using the interface JsonReader. Similarly, these object models can be written to an output source (such as OutputStream or Writer) using the class JsonWriter.

For example, let's write code to search Facebook's public posts using the object model API. The Facebook API gives the search results in the JSON format shown in Listing 2:

1 {
2     "data" : [
3         { "from" : { "name" : "xxx", ... }, "message" : "yyy", ... },
4         { "from" : { "name" : "ppp", ... }, "message" : "qqq", ... },
5         ...
6     ],
7     ...
8 }
Listing 2. JSON representation of searching Facebook public posts

We can use the object model API to get names and their public posts about the term java. In the Listing 3, lines 1 through 3 lines create JsonReader; line 5 creates JsonObject for the results; line 7 loops over each result; and lines 8 through 11 get the name of the person who posted, get the public post, and prints them. Note that the JsonReader and other objects in this API can be used in the try-with-resources statement (which is also called automatic resource management [ARM]).

 1 URL url = new URL("https://graph.facebook.com/search?q=java&type=post");
 2 try (InputStream is = url.openStream();
 3      JsonReader rdr = Json.createReader(is)) {
 4
 5     JsonObject obj = rdr.readObject();
 6     JsonArray results = obj.getJsonArray("data");
 7     for (JsonObject result : results.getValuesAs(JsonObject.class)) {
 8         System.out.print(result.getJsonObject("from").getString("name"));
 9         System.out.print(": ");
10         System.out.println(result.getString("message", ""));
11         System.out.println("-----------");
12     }
13 }
Listing 3. Processing Facebook posts using the object model API

The Streaming API
The streaming API is similar to the Streaming API for XML (StAX) and consists of the interfaces JsonParser and JsonGenerator. JsonParser contains methods to parse JSON data using the streaming model. JsonGenerator contains methods to write JSON data to an output source. Table 2 lists the main classes and interfaces in the streaming API.

Table 2. Main classes in the streaming API
Class or Interface	Description
Json	Contains static methods to create JSON parsers, generators, and their factory objects.
JsonParser	Represents an event-based parser that can read JSON data from a stream.
JsonGenerator	Writes JSON data to a stream one value at a time

JsonParser provides forward, read-only access to JSON data using the pull parsing programming model. In this model, the application code controls the thread and calls methods in the parser interface to move the parser forward or to obtain JSON data from the current state of the parser.

JsonGenerator provides methods to write JSON data to a stream. The generator can be used to write name/value pairs in JSON objects and values in JSON arrays.

The streaming API is a low-level API designed to process large amounts of JSON data efficiently. Other JSON frameworks (such as JSON binding) can be implemented using this API.

Let's use the streaming API to do the same thing that was done with the object model API, that is, to search Facebook's public posts about java. In Listing 4, lines 1 through 3 create a streaming parser, lines 4 through 5 get the next event, line 6 looks for the KEY_NAME event, lines 8 through 11 read names and print them, and lines 14 through 16 read the public posts and print them. The use of streaming API provides an efficient way to access names and their public posts when compared to the same task using the object model API.

 1 URL url = new URL("https://graph.facebook.com/search?q=java&type=post");
 2 try (InputStream is = url.openStream();
 3      JsonParser parser = Json.createParser(is)) {
 4     while (parser.hasNext()) {
 5         Event e = parser.next();
 6         if (e == Event.KEY_NAME) {
 7             switch (parser.getString()) {
 8                 case "name":
 9                     parser.next();
10                    System.out.print(parser.getString());
11                    System.out.print(": ");
12                    break;
13                case "message":
14                    parser.next();
15                    System.out.println(parser.getString());
16                    System.out.println("---------");
17                    break;
18             }
19         }
20     }
21 }
Listing 4. Processing Facebook posts using the streaming API

Conclusion
The Java API for JSON Processing provides the following capabilities:

Parsing input streams into immutable objects or event streams
Writing event streams or immutable objects to output streams
Programmatically navigating immutable objects
Programmatically building immutable objects with builders
The API becomes a base for building data binding, transformation, querying, or other manipulation APIs. JAX-RS 2.0 provides native integration for the Java API for JSON Processing.

See Also
The JSON Processing specification
The JSON Processing tutorial
The JSON Processing reference implementation
About the Author
Jitendra Kotamraju, a principal member of the technical staff at Oracle, is the JSON Processing specification lead and one of the key engineers behind GlassFish. Before leading the JSON Processing project, he was in charge of both the specification and implementation of JAX-WS 2.2.

Join the Conversation
Join the Java community conversation on Facebook, Twitter, and the Oracle Java Blog!

Class Base64.Encoder

java.lang.Object
java.util.Base64.Encoder
Enclosing class:
Base64

public static class Base64.Encoder
extends Object
This class implements an encoder for encoding byte data using the Base64 encoding scheme as specified in RFC 4648 and RFC 2045.
Instances of Base64.Encoder class are safe for use by multiple concurrent threads.

Unless otherwise noted, passing a null argument to a method of this class will cause a NullPointerException to be thrown.

Since:
1.8
See Also:
Base64.Decoder
Method Summary

All MethodsInstance MethodsConcrete Methods
Modifier and Type   Method and Description
byte[]  encode(byte[] src)
Encodes all bytes from the specified byte array into a newly-allocated byte array using the Base64 encoding scheme.
int encode(byte[] src, byte[] dst)
Encodes all bytes from the specified byte array using the Base64 encoding scheme, writing the resulting bytes to the given output byte array, starting at offset 0.
ByteBuffer  encode(ByteBuffer buffer)
Encodes all remaining bytes from the specified byte buffer into a newly-allocated ByteBuffer using the Base64 encoding scheme.
String  encodeToString(byte[] src)
Encodes the specified byte array into a String using the Base64 encoding scheme.
Base64.Encoder  withoutPadding()
Returns an encoder instance that encodes equivalently to this one, but without adding any padding character at the end of the encoded byte data.
OutputStream    wrap(OutputStream os)
Wraps an output stream for encoding byte data using the Base64 encoding scheme.
Methods inherited from class java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait
Method Detail

encode
public byte[] encode(byte[] src)
Encodes all bytes from the specified byte array into a newly-allocated byte array using the Base64 encoding scheme. The returned byte array is of the length of the resulting bytes.
Parameters:
src - the byte array to encode
Returns:
A newly-allocated byte array containing the resulting encoded bytes.
encode
public int encode(byte[] src,
                  byte[] dst)
Encodes all bytes from the specified byte array using the Base64 encoding scheme, writing the resulting bytes to the given output byte array, starting at offset 0.
It is the responsibility of the invoker of this method to make sure the output byte array dst has enough space for encoding all bytes from the input byte array. No bytes will be written to the output byte array if the output byte array is not big enough.

Parameters:
src - the byte array to encode
dst - the output byte array
Returns:
The number of bytes written to the output byte array
Throws:
IllegalArgumentException - if dst does not have enough space for encoding all input bytes.
encodeToString
public String encodeToString(byte[] src)
Encodes the specified byte array into a String using the Base64 encoding scheme.
This method first encodes all input bytes into a base64 encoded byte array and then constructs a new String by using the encoded byte array and the ISO-8859-1 charset.

In other words, an invocation of this method has exactly the same effect as invoking new String(encode(src), StandardCharsets.ISO_8859_1).

Parameters:
src - the byte array to encode
Returns:
A String containing the resulting Base64 encoded characters
encode
public ByteBuffer encode(ByteBuffer buffer)
Encodes all remaining bytes from the specified byte buffer into a newly-allocated ByteBuffer using the Base64 encoding scheme. Upon return, the source buffer's position will be updated to its limit; its limit will not have been changed. The returned output buffer's position will be zero and its limit will be the number of resulting encoded bytes.
Parameters:
buffer - the source ByteBuffer to encode
Returns:
A newly-allocated byte buffer containing the encoded bytes.
wrap
public OutputStream wrap(OutputStream os)
Wraps an output stream for encoding byte data using the Base64 encoding scheme.
It is recommended to promptly close the returned output stream after use, during which it will flush all possible leftover bytes to the underlying output stream. Closing the returned output stream will close the underlying output stream.

Parameters:
os - the output stream.
Returns:
the output stream for encoding the byte data into the specified Base64 encoded format
withoutPadding
public Base64.Encoder withoutPadding()
Returns an encoder instance that encodes equivalently to this one, but without adding any padding character at the end of the encoded byte data.
The encoding scheme of this encoder instance is unaffected by this invocation. The returned encoder instance should be used for non-padding encoding operation.

Returns:
an equivalent encoder that encodes without adding any padding character at the end