/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package rversedesigner;

import au.com.bytecode.opencsv.CSVReader;
import au.com.bytecode.opencsv.CSVWriter;
import com.sdmetrics.model.MetaModel;
import com.sdmetrics.model.MetaModelElement;
import com.sdmetrics.model.Model;
import com.sdmetrics.model.ModelElement;
import com.sdmetrics.model.XMIReader;
import com.sdmetrics.model.XMITransformations;
import com.sdmetrics.util.XMLParser;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintStream;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.lang.CharSequence;
import javax.swing.Action;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;

/**
 *
 * @author aislimau
 */
public class TextExtractor extends javax.swing.JFrame {

    /**
     * Creates new form TextExtractor
     */
    
    protected String xmiFileStr = "";

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        textPanel = new javax.swing.JPanel();
        fullClassnameText = new javax.swing.JScrollPane();
        classnamesText = new javax.swing.JTextArea();
        jScrollPane1 = new javax.swing.JScrollPane();
        extractClassnameText = new javax.swing.JTextArea();
        xmiFilename = new javax.swing.JTextField();
        chooseFileBtn = new javax.swing.JButton();
        extractText = new javax.swing.JButton();
        readClassMetrics = new javax.swing.JButton();
        csvFileName = new javax.swing.JTextField();
        csvFile = new javax.swing.JButton();
        readCSV = new javax.swing.JButton();
        saveText = new javax.swing.JButton();
        clearBtn = new javax.swing.JButton();
        testSearch = new javax.swing.JButton();
        csvInput = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openMenuItem = new javax.swing.JMenuItem();
        saveMenuItem = new javax.swing.JMenuItem();
        saveAsMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        cutMenuItem = new javax.swing.JMenuItem();
        copyMenuItem = new javax.swing.JMenuItem();
        pasteMenuItem = new javax.swing.JMenuItem();
        deleteMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        contentsMenuItem = new javax.swing.JMenuItem();
        aboutMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        classnamesText.setColumns(20);
        classnamesText.setLineWrap(true);
        classnamesText.setRows(5);
        classnamesText.setAutoscrolls(false);
        fullClassnameText.setViewportView(classnamesText);

        extractClassnameText.setColumns(20);
        extractClassnameText.setLineWrap(true);
        extractClassnameText.setRows(5);
        extractClassnameText.setAutoscrolls(false);
        jScrollPane1.setViewportView(extractClassnameText);

        javax.swing.GroupLayout textPanelLayout = new javax.swing.GroupLayout(textPanel);
        textPanel.setLayout(textPanelLayout);
        textPanelLayout.setHorizontalGroup(
            textPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(textPanelLayout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(fullClassnameText, javax.swing.GroupLayout.PREFERRED_SIZE, 366, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(25, Short.MAX_VALUE))
        );
        textPanelLayout.setVerticalGroup(
            textPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(textPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(textPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(fullClassnameText, javax.swing.GroupLayout.DEFAULT_SIZE, 234, Short.MAX_VALUE)
                    .addComponent(jScrollPane1)))
        );

        xmiFilename.setText("D:\\Dropbox\\Dropbox\\MyShare\\MyXMI\\Input\\TestReverseXMI1_1_Test1.xmi");

        chooseFileBtn.setText("Select XMI File");
        chooseFileBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseFileBtnActionPerformed(evt);
            }
        });

        extractText.setText("Extract Text");
        extractText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                extractTextActionPerformed(evt);
            }
        });

        readClassMetrics.setText("Read Class Metrics");
        readClassMetrics.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                readClassMetricsActionPerformed(evt);
            }
        });

        csvFileName.setText("D:\\Dropbox\\Dropbox\\MyShare\\TextMining\\Dataset\\27_07_2013AllClassnames_csv.csv");
        csvFileName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                csvFileNameActionPerformed(evt);
            }
        });

        csvFile.setText("Select CSV File");
        csvFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                csvFileActionPerformed(evt);
            }
        });

        readCSV.setText("Read CSV");
        readCSV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                readCSVActionPerformed(evt);
            }
        });

        saveText.setText("Save Text");
        saveText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveTextActionPerformed(evt);
            }
        });

        clearBtn.setText("Clear");
        clearBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearBtnActionPerformed(evt);
            }
        });

        testSearch.setText("Search");
        testSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                testSearchActionPerformed(evt);
            }
        });

        csvInput.setText("D:\\Dropbox\\Dropbox\\MyShare\\TextMining\\Dataset\\Neuroph_3_YN.csv");

        jButton1.setText("Select Input");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        fileMenu.setMnemonic('f');
        fileMenu.setText("File");

        openMenuItem.setMnemonic('o');
        openMenuItem.setText("Open");
        fileMenu.add(openMenuItem);

        saveMenuItem.setMnemonic('s');
        saveMenuItem.setText("Save");
        fileMenu.add(saveMenuItem);

        saveAsMenuItem.setMnemonic('a');
        saveAsMenuItem.setText("Save As ...");
        saveAsMenuItem.setDisplayedMnemonicIndex(5);
        fileMenu.add(saveAsMenuItem);

        exitMenuItem.setMnemonic('x');
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        editMenu.setMnemonic('e');
        editMenu.setText("Edit");

        cutMenuItem.setMnemonic('t');
        cutMenuItem.setText("Cut");
        editMenu.add(cutMenuItem);

        copyMenuItem.setMnemonic('y');
        copyMenuItem.setText("Copy");
        editMenu.add(copyMenuItem);

        pasteMenuItem.setMnemonic('p');
        pasteMenuItem.setText("Paste");
        editMenu.add(pasteMenuItem);

        deleteMenuItem.setMnemonic('d');
        deleteMenuItem.setText("Delete");
        editMenu.add(deleteMenuItem);

        menuBar.add(editMenu);

        helpMenu.setMnemonic('h');
        helpMenu.setText("Help");

        contentsMenuItem.setMnemonic('c');
        contentsMenuItem.setText("Contents");
        helpMenu.add(contentsMenuItem);

        aboutMenuItem.setMnemonic('a');
        aboutMenuItem.setText("About");
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(extractText)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(readClassMetrics)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(readCSV)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(saveText)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(clearBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(testSearch))
                    .addComponent(textPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(csvInput)
                            .addComponent(csvFileName)
                            .addComponent(xmiFilename, javax.swing.GroupLayout.DEFAULT_SIZE, 464, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(chooseFileBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(csvFile, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(24, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(xmiFilename)
                    .addComponent(chooseFileBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(csvFileName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(csvFile))
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(csvInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(textPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(extractText)
                    .addComponent(readClassMetrics)
                    .addComponent(readCSV)
                    .addComponent(saveText)
                    .addComponent(clearBtn)
                    .addComponent(testSearch))
                .addContainerGap(22, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public TextExtractor (){
        initComponents();
    }
    
    class csvExtendName extends javax.swing.filechooser.FileFilter {
        @Override
        public boolean accept(File file) {
            // Allow only directories, or files with ".txt" extension
            return file.isDirectory() || file.getAbsolutePath().endsWith(".csv") 
                    || file.getAbsolutePath().endsWith(".xls") 
                    || file.getAbsolutePath().endsWith(".xlsx");
        }
        
        @Override
        public String getDescription() {
            // This description will be displayed in the dialog,
            // hard-coded = ugly, should be done via I18N
            return "CSV files (*.csv/xls/xlsx)";
        }
    } 
    
    class xmiExtendName extends javax.swing.filechooser.FileFilter {
        @Override
        public boolean accept(File file) {
            // Allow only directories, or files with ".txt" extension
            return file.isDirectory() || file.getAbsolutePath().endsWith(".txt") 
                    || file.getAbsolutePath().endsWith(".xml") 
                    || file.getAbsolutePath().endsWith(".xmi");
        }
        
        @Override
        public String getDescription() {
            // This description will be displayed in the dialog,
            // hard-coded = ugly, should be done via I18N
            return "XMI files (*.xmi/xml/txt)";
        }
    }
        
    class textExtendName extends javax.swing.filechooser.FileFilter {
        @Override
        public boolean accept(File file) {
            // Allow only directories, or files with ".txt" extension
            return file.isDirectory() || file.getAbsolutePath().endsWith(".txt") 
                    || file.getAbsolutePath().endsWith(".xml") 
                    || file.getAbsolutePath().endsWith(".xmi");
        }
        
        @Override
        public String getDescription() {
            // This description will be displayed in the dialog,
            // hard-coded = ugly, should be done via I18N
            return "Text files (*.txt/xml/xmi)";
        }
    } 
    
        
        
    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    /** This is a substitute for FileNameExtensionFilter, which is
     * only available on Java SE 6.
     */
     
    private void chooseFileBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseFileBtnActionPerformed
    
        String [] row = null;
        FileFilter filters;
        JFileChooser fileChooser = new JFileChooser();
            
        filters = new xmiExtendName();
        fileChooser.setFileFilter(filters);
        int returnVal = fileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            xmiFileStr = "";
            File file = fileChooser.getSelectedFile();           
            xmiFileStr = file.getAbsolutePath();
            xmiFilename.setText(xmiFileStr);
        } else {
                System.out.println("File access cancelled by user.");
                }     
    }//GEN-LAST:event_chooseFileBtnActionPerformed

    private void extractTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_extractTextActionPerformed
        // TODO add your handling code here:
        String metaModelURL = "metamodel.xml";//sdmetrics";  // metamodel definition to use
	String xmiTransURL = "xmiTrans1_0.xml";   // XMI tranformations to use
	String xmiFile = xmiFilename.getText(); // XMI file with the UML model
        
        classnamesText.setLineWrap(true);
        if (xmiFile.isEmpty()== false) {

            XMLParser parser = null;
            try {
                parser = new XMLParser();
            } catch (Exception ex) {
                Logger.getLogger(TextExtractor.class.getName()).log(Level.SEVERE, null, ex);
            }
            MetaModel metaModel = new MetaModel();
            try {
                parser.parse(metaModelURL, metaModel.getSAXParserHandler());
            } catch (Exception ex) {
                Logger.getLogger(TextExtractor.class.getName()).log(Level.SEVERE, null, ex);
            }

            XMITransformations trans=new XMITransformations(metaModel);
            try {
                parser.parse(xmiTransURL, trans.getSAXParserHandler());
            } catch (Exception ex) {
                Logger.getLogger(TextExtractor.class.getName()).log(Level.SEVERE, null, ex);
            }

            Model model = new Model(metaModel);
            XMIReader xmiReader = new XMIReader(trans, model);
            try {
                parser.parse(xmiFile, xmiReader);
            } catch (Exception ex) {
                Logger.getLogger(TextExtractor.class.getName()).log(Level.SEVERE, null, ex);
            }

            String[] filters = { "#.java", "#.javax", "#.org.xml" };
            model.setFilter(filters, false, true);

            //iterate over all model element types in the metamodel
            for (MetaModelElement type : metaModel) {
                System.out.println("Elements of type: " + type.getName());

            // iterate over all model elements of the current type
                List<ModelElement> elements = model.getAcceptedElements(type);
                    for (ModelElement me : elements) {
                        int keywordCount = 0;
                        if (type.getName().matches("class")){
                            String stringa1 = me.getFullName();
                            String stringa2 = me.getName();
                            classnamesText.append(stringa2 + ": ");
                            //printing the data
                            int dotIndex = stringa1.lastIndexOf(".");
                            int stringLength = stringa1.length();
                            
                            char[] char_arr = stringa1.toCharArray();
                            int count2 = dotIndex + 1;
                            int tempKeyword = 1;
                            String extClsName = "";
                            String subClsName = "";
                        
                        extractClassnameText.append(stringa2 + " : \n");
                        while (count2 < stringLength){
                        // if uppercase and character after is lowercase
                            if(Character.isUpperCase(char_arr[count2]) == true && 
                                    count2 != (stringLength - 1) && 
                                    Character.isLowerCase(char_arr[count2 + 1]) == true  ) {
                                classnamesText.append(" " + Character.toString(char_arr[count2]));
                                if (extClsName.isEmpty()){
                                    extClsName += Character.toString(char_arr[count2]);
                                    System.out.println(extClsName);
                                } else {
                                    subClsName = "";
                                    subClsName = extClsName;
                                    extractClassnameText.append(subClsName + "\n");
                                    tempKeyword += 1;
                                    extClsName = "";
                                    extClsName += Character.toString(char_arr[count2]);
                                }
                                //extClsName += Character.toString(char_arr[count2]);
                                //System.out.println(extClsName);
                            }
                        // if uppercase and character before lower case, begin new line
                            else if(Character.isUpperCase(char_arr[count2]) == true && 
                                    Character.isLowerCase(char_arr[count2 - 1]) == true) {
                                classnamesText.append(" " + Character.toString(char_arr[count2]));
                                if (extClsName.isEmpty()){
                                    extClsName += Character.toString(char_arr[count2]);
                                    System.out.println(extClsName);
                                } else {
                                    subClsName = "";
                                    subClsName = extClsName;
                                    extractClassnameText.append(subClsName + "\n");
                                    tempKeyword += 1;
                                    extClsName = "";
                                    extClsName += Character.toString(char_arr[count2]);
                                }
                                //extClsName = "";
                                //extClsName += Character.toString(char_arr[count2]);
                                //System.out.println(extClsName);
                            }
                        // if uppercase and character before also uppercase
                            else if(Character.isUpperCase(char_arr[count2]) == true && 
                                    Character.isUpperCase(char_arr[count2 - 1]) == true) {
                                classnamesText.append(Character.toString(char_arr[count2]));
                                extClsName += Character.toString(char_arr[count2]);
                                System.out.println(extClsName);
                            }
                        // if lowercase
                            else if (Character.isLowerCase(char_arr[count2]) == true) {
                                classnamesText.append(Character.toString(char_arr[count2]));
                                extClsName += Character.toString(char_arr[count2]);
                                System.out.println(extClsName);
                            }
                            else {
                                classnamesText.append(" " + Character.toString(char_arr[count2]));
                                extClsName += Character.toString(char_arr[count2]);
                                System.out.println(extClsName);
                            }       
                         count2++;
                        }
                        System.out.println("After loop : " + extClsName);
                        keywordCount = tempKeyword;
                        extractClassnameText.append(extClsName);
                        extractClassnameText.append("\n");
                        classnamesText.append("\n");
                        extractClassnameText.append(Integer.toString(keywordCount) + "\n");
                    }
                    
               }
            }try {
                testWriter();
            } catch (IOException ex) {
                Logger.getLogger(TextExtractor.class.getName()).log(Level.SEVERE, null, ex);
            }
	} else
                JOptionPane.showMessageDialog(null, "No XMI file selected");
    }//GEN-LAST:event_extractTextActionPerformed

    private void readClassMetricsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_readClassMetricsActionPerformed
        String command = "java -jar SDMetrics.jar -xmi " +  xmiFilename.getText()  + " -filter #.java -filter #.javax -filter #.org.xml -f csv data";
        Process process = null;
        try {
            String s;
            process = Runtime.getRuntime().exec(command); 
            BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(process.getInputStream()));
            while((s=bufferedReader.readLine()) != null)
            System.out.println(s);
            process.waitFor();
        } catch (IOException ex) {
            Logger.getLogger(ReverseDesignerApp.class.getName()).log(Level.SEVERE, null, ex);
        }   catch (InterruptedException ex) {
                Logger.getLogger(ReverseDesignerApp.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_readClassMetricsActionPerformed

    private void csvFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_csvFileActionPerformed
        // TODO add your handling code here:
        String [] row = null;
        String csvFileStr = "";
        FileFilter filters;
        JFileChooser fileChooser = new JFileChooser();
            
        filters = new csvExtendName();
        fileChooser.setFileFilter(filters);
        int returnVal = fileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            csvFileStr = "";
            File file = fileChooser.getSelectedFile();           
            csvFileStr = file.getAbsolutePath();
            csvFileName.setText(csvFileStr);
        } else {
                System.out.println("File access cancelled by user.");
                }     
    }//GEN-LAST:event_csvFileActionPerformed

    private void readCSVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_readCSVActionPerformed
        CSVReader csvReader = null;
        classnamesText.setLineWrap(true);
        
        String csvFilename = "";
        csvFilename = csvFileName.getText();
        String [] row = null;
        
        try {
            // TODO add your handling code here:
            
            List<String> classListLocal = new ArrayList<>();
            /*JFileChooser fileChooser = new JFileChooser();
            String [] row = null;
            String csvFilename = "";
            FileFilter filters;

            filters = new csvExtendName();
            fileChooser.setFileFilter(filters);
            int returnVal = fileChooser.showOpenDialog(this);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                csvFilename = "";
                File file = fileChooser.getSelectedFile();
                csvFilename = file.getAbsolutePath();
            } else {
                System.out.println("File access cancelled by user.");
            }*/

            if (csvFilename.isEmpty() == false) {
                try {
                    csvReader = new CSVReader (new FileReader(csvFilename));
                    try {
                        row = csvReader.readNext();
                    } catch (IOException ex) {
                        Logger.getLogger(TextExtractor.class.getName()).log(Level.SEVERE, null, ex);
                    }
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(TextExtractor.class.getName()).log(Level.SEVERE, null, ex);
                }

            int count = 0;
 
            while ((row = csvReader.readNext()) != null){
                int lastDotIndex = row[0].lastIndexOf(".") + 1;
                //row[0] = row[0].substring(lastDotIndex);
                //classListLocal.add(row[0].substring(lastDotIndex));
                //System.out.println(count + " class name :" + classListLocal.get(count));
                //classnamesText.append(classListLocal.get(count));
                String stringa1 = row[0];//classListLocal.get(count);
                System.out.println("Stringa1 :" + stringa1);               //printing the data
                int dotIndex = stringa1.lastIndexOf(".");
                System.out.println("dotIndex : " + dotIndex);
                int stringLength = stringa1.length();
                char[] char_arr = stringa1.toCharArray();
                int count2 = dotIndex + 1;
                System.out.println("count2 : " + count2);
                
                while (count2 < stringLength){
                 // if uppercase and character after is lowercase
                    System.out.println("count2 : " + count2);
                    if(Character.isUpperCase(char_arr[count2]) == true && count2 != (stringLength - 1) &&
                       Character.isLowerCase(char_arr[count2 + 1]) == true  ) {
                       classnamesText.append(" " + Character.toString(char_arr[count2]));
                       }
                     // if uppercase, not first character and character before lower case, add space
                     else if(Character.isUpperCase(char_arr[count2]) == true && Character.isLowerCase(char_arr[count2 - 1]) == true) {
                       classnamesText.append(" " + Character.toString(char_arr[count2]));
                       }
                      // if uppercase and character before also uppercase
                     else if(Character.isUpperCase(char_arr[count2]) == true && Character.isUpperCase(char_arr[count2 - 1]) == true) {
                       classnamesText.append(Character.toString(char_arr[count2]));
                       }
                      // if lowercase
                     else if (Character.isLowerCase(char_arr[count2]) == true) {
                        classnamesText.append(Character.toString(char_arr[count2]));
                        }
                        else
                           classnamesText.append(" " + Character.toString(char_arr[count2]));
                        count2++;
                        }
                  count++;
                  }              
            }

            try {
                csvReader.close();
            } catch (IOException ex) {
                Logger.getLogger(TextExtractor.class.getName()).log(Level.SEVERE, null, ex);
                }
            } catch (IOException ex) {
            Logger.getLogger(TextExtractor.class.getName()).log(Level.SEVERE, null, ex);
            }
    }//GEN-LAST:event_readCSVActionPerformed

    private void saveTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveTextActionPerformed
        // TODO add your handling code here:
    PrintStream out = null;
    String textFileStr = "";
    
    FileFilter filters;
    JFileChooser fileChooser = new JFileChooser();
            
    filters = new csvExtendName();
    fileChooser.setFileFilter(filters);
       int returnVal = fileChooser.showSaveDialog(this);
       if (returnVal == JFileChooser.APPROVE_OPTION) {
           File file = fileChooser.getSelectedFile();           
           textFileStr = file.getAbsolutePath();
           csvFileName.setText(textFileStr);
       } else {
           System.out.println("File access cancelled by user.");
           }    
    
      if (textFileStr.isEmpty() == false){
          try {
            try {
                out = new PrintStream(new FileOutputStream(csvFileName.getText()));
            } catch (FileNotFoundException ex) {
                Logger.getLogger(TextExtractor.class.getName()).log(Level.SEVERE, null, ex);
            }
            if (classnamesText.getText().isEmpty() == false){
                out.print(classnamesText.getText());
            }
        }
        finally {
            if (out != null) out.close();
            }
        }
       
    }//GEN-LAST:event_saveTextActionPerformed

    private void clearBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearBtnActionPerformed
        // TODO add your handling code here:
        classnamesText.setText(null);
    }//GEN-LAST:event_clearBtnActionPerformed

    private void testSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_testSearchActionPerformed
        // TODO add your handling code here:
        CSVReader csvReader = null;
        String csvFilename = "";
        csvFilename = csvFileName.getText();
        String testName = "Class";
        String[] row = null;
        
        if (csvFilename.isEmpty() == false) {          
            try {
                int breaker = 1;
                testName = testName.toLowerCase();
               
                System.out.println("after while");
                int count = testName.length();
                System.out.println("count : " + count);
                
                while (count > 0 && breaker == 1){
                    try {
                        csvReader = new CSVReader (new FileReader(csvFilename));
                        try {
                            row = csvReader.readNext();
                            } catch (IOException ex) {
                                Logger.getLogger(TextExtractor.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        } catch (FileNotFoundException ex) {
                            Logger.getLogger(TextExtractor.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    while ((row = csvReader.readNext()) != null){                               
                    System.out.println("in row : " + row[0]);
                      if (row[0].equalsIgnoreCase(testName)){
                          classnamesText.append(row[0] + " ");
                          classnamesText.append(row[1] + " ");
                          classnamesText.append(row[2] + " ");
                          classnamesText.append(row[3]);
                          breaker = 0;
                          break;
                      }                    
                    } 
                  csvReader.close();
                  System.out.println(testName);
                  count--;
                  testName = testName.substring(0, count);
                  }        
            } catch (IOException ex) {
                Logger.getLogger(TextExtractor.class.getName()).log(Level.SEVERE, null, ex);
            }
            }
        
        
    }//GEN-LAST:event_testSearchActionPerformed

    private void csvFileNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_csvFileNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_csvFileNameActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    
    
    private void testWriter() throws IOException{
        String csv = "C:\\output2.csv";
        String test1 = "Test 1";
        String test2 = "Test 2";
        try (CSVWriter writer = new CSVWriter(new FileWriter(csv))) {
            List<String[]> data = new ArrayList<>();
            data.add(new String[] {"India", test1});
            data.add(new String[] {"United States", "Washington D.C"});
            data.add(new String[] {test2, "Berlin"});
     
            writer.writeAll(data);
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TextExtractor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TextExtractor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TextExtractor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TextExtractor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TextExtractor().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JButton chooseFileBtn;
    private javax.swing.JTextArea classnamesText;
    private javax.swing.JButton clearBtn;
    private javax.swing.JMenuItem contentsMenuItem;
    private javax.swing.JMenuItem copyMenuItem;
    private javax.swing.JButton csvFile;
    private javax.swing.JTextField csvFileName;
    private javax.swing.JTextField csvInput;
    private javax.swing.JMenuItem cutMenuItem;
    private javax.swing.JMenuItem deleteMenuItem;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JTextArea extractClassnameText;
    private javax.swing.JButton extractText;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JScrollPane fullClassnameText;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JMenuItem pasteMenuItem;
    private javax.swing.JButton readCSV;
    private javax.swing.JButton readClassMetrics;
    private javax.swing.JMenuItem saveAsMenuItem;
    private javax.swing.JMenuItem saveMenuItem;
    private javax.swing.JButton saveText;
    private javax.swing.JButton testSearch;
    private javax.swing.JPanel textPanel;
    private javax.swing.JTextField xmiFilename;
    // End of variables declaration//GEN-END:variables
}
