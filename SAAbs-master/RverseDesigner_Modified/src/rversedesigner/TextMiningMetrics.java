/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package rversedesigner;

import au.com.bytecode.opencsv.CSVReader;
import au.com.bytecode.opencsv.CSVWriter;
import com.sdmetrics.model.MetaModel;
import com.sdmetrics.model.MetaModelElement;
import com.sdmetrics.model.Model;
import com.sdmetrics.model.ModelElement;
import com.sdmetrics.model.XMIReader;
import com.sdmetrics.model.XMITransformations;
import com.sdmetrics.util.XMLParser;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintStream;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;

/**
 *
 * @author aislimau
 */
public class TextMiningMetrics extends javax.swing.JFrame {

    /**
     * Creates new form TextExtractor
     */
    
    protected String xmiFileStr = "";

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        textPanel = new javax.swing.JPanel();
        fullClassnameText = new javax.swing.JScrollPane();
        classnamesText = new javax.swing.JTextArea();
        jScrollPane1 = new javax.swing.JScrollPane();
        extractClassnameText = new javax.swing.JTextArea();
        list1 = new java.awt.List();
        xmiFilename = new javax.swing.JTextField();
        chooseFileBtn = new javax.swing.JButton();
        extractText = new javax.swing.JButton();
        readClassMetrics = new javax.swing.JButton();
        csvFileName = new javax.swing.JTextField();
        csvFile = new javax.swing.JButton();
        readCSV = new javax.swing.JButton();
        saveText = new javax.swing.JButton();
        clearBtn = new javax.swing.JButton();
        testSearch = new javax.swing.JButton();
        csvInput = new javax.swing.JTextField();
        selInputBtn = new javax.swing.JButton();
        selectProject = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openMenuItem = new javax.swing.JMenuItem();
        saveMenuItem = new javax.swing.JMenuItem();
        saveAsMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        cutMenuItem = new javax.swing.JMenuItem();
        copyMenuItem = new javax.swing.JMenuItem();
        pasteMenuItem = new javax.swing.JMenuItem();
        deleteMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        contentsMenuItem = new javax.swing.JMenuItem();
        aboutMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        classnamesText.setColumns(20);
        classnamesText.setLineWrap(true);
        classnamesText.setRows(5);
        classnamesText.setAutoscrolls(false);
        fullClassnameText.setViewportView(classnamesText);

        extractClassnameText.setColumns(20);
        extractClassnameText.setLineWrap(true);
        extractClassnameText.setRows(5);
        extractClassnameText.setAutoscrolls(false);
        jScrollPane1.setViewportView(extractClassnameText);

        list1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                list1ActionPerformed(evt);
            }
        });
        list1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                list1KeyPressed(evt);
            }
        });

        javax.swing.GroupLayout textPanelLayout = new javax.swing.GroupLayout(textPanel);
        textPanel.setLayout(textPanelLayout);
        textPanelLayout.setHorizontalGroup(
            textPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(textPanelLayout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(fullClassnameText, javax.swing.GroupLayout.DEFAULT_SIZE, 367, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addComponent(list1, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        textPanelLayout.setVerticalGroup(
            textPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, textPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(textPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(list1, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fullClassnameText, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(36, 36, 36))
        );

        xmiFilename.setText("D:\\Dropbox\\Dropbox\\MyShare\\MyXMI\\Input\\TestReverseXMI1_1_Test1.xmi");

        chooseFileBtn.setText("Select XMI File");
        chooseFileBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseFileBtnActionPerformed(evt);
            }
        });

        extractText.setText("Extract Text");
        extractText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                extractTextActionPerformed(evt);
            }
        });

        readClassMetrics.setText("Read Class Metrics");
        readClassMetrics.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                readClassMetricsActionPerformed(evt);
            }
        });

        csvFileName.setText("D:\\Dropbox\\Dropbox\\MyShare\\TextMining\\Dataset\\AllClassnames.csv");
        csvFileName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                csvFileNameActionPerformed(evt);
            }
        });

        csvFile.setText("Select CSV File");
        csvFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                csvFileActionPerformed(evt);
            }
        });

        readCSV.setText("Read CSV");
        readCSV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                readCSVActionPerformed(evt);
            }
        });

        saveText.setText("Save Text");
        saveText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveTextActionPerformed(evt);
            }
        });

        clearBtn.setText("Clear");
        clearBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearBtnActionPerformed(evt);
            }
        });

        testSearch.setText("Search");
        testSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                testSearchActionPerformed(evt);
            }
        });

        csvInput.setText("D:\\Dropbox\\Dropbox\\MyShare\\TextMining\\Dataset\\DataFull\\JavaClient\\FullData\\JavaClient_YN2.csv");
        csvInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                csvInputActionPerformed(evt);
            }
        });

        selInputBtn.setText("Select Design Metrics File Input");
        selInputBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selInputBtnActionPerformed(evt);
            }
        });

        selectProject.setText("Select Project");
        selectProject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectProjectActionPerformed(evt);
            }
        });

        fileMenu.setMnemonic('f');
        fileMenu.setText("File");

        openMenuItem.setMnemonic('o');
        openMenuItem.setText("Open");
        fileMenu.add(openMenuItem);

        saveMenuItem.setMnemonic('s');
        saveMenuItem.setText("Save");
        fileMenu.add(saveMenuItem);

        saveAsMenuItem.setMnemonic('a');
        saveAsMenuItem.setText("Save As ...");
        saveAsMenuItem.setDisplayedMnemonicIndex(5);
        fileMenu.add(saveAsMenuItem);

        exitMenuItem.setMnemonic('x');
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        editMenu.setMnemonic('e');
        editMenu.setText("Edit");

        cutMenuItem.setMnemonic('t');
        cutMenuItem.setText("Cut");
        editMenu.add(cutMenuItem);

        copyMenuItem.setMnemonic('y');
        copyMenuItem.setText("Copy");
        editMenu.add(copyMenuItem);

        pasteMenuItem.setMnemonic('p');
        pasteMenuItem.setText("Paste");
        editMenu.add(pasteMenuItem);

        deleteMenuItem.setMnemonic('d');
        deleteMenuItem.setText("Delete");
        editMenu.add(deleteMenuItem);

        menuBar.add(editMenu);

        helpMenu.setMnemonic('h');
        helpMenu.setText("Help");

        contentsMenuItem.setMnemonic('c');
        contentsMenuItem.setText("Contents");
        helpMenu.add(contentsMenuItem);

        aboutMenuItem.setMnemonic('a');
        aboutMenuItem.setText("About");
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(extractText)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(readClassMetrics)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(readCSV)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(saveText)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(clearBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(testSearch)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(selectProject, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(29, 29, 29))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(csvFileName)
                            .addComponent(csvInput)
                            .addComponent(xmiFilename))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(csvFile, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(chooseFileBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(selInputBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(textPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(xmiFilename)
                    .addComponent(chooseFileBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(csvFileName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(csvFile))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(csvInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(selInputBtn))
                .addGap(24, 24, 24)
                .addComponent(textPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(extractText)
                    .addComponent(readClassMetrics)
                    .addComponent(readCSV)
                    .addComponent(saveText)
                    .addComponent(clearBtn)
                    .addComponent(testSearch)
                    .addComponent(selectProject)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public TextMiningMetrics (){
        initComponents();
    }
    
    class csvExtendName extends javax.swing.filechooser.FileFilter {
        @Override
        public boolean accept(File file) {
            // Allow only directories, or files with ".txt" extension
            return file.isDirectory() || file.getAbsolutePath().endsWith(".csv") 
                    || file.getAbsolutePath().endsWith(".xls") 
                    || file.getAbsolutePath().endsWith(".xlsx");
        }
        
        @Override
        public String getDescription() {
            // This description will be displayed in the dialog,
            // hard-coded = ugly, should be done via I18N
            return "CSV files (*.csv/xls/xlsx)";
        }
    } 
    
    class xmiExtendName extends javax.swing.filechooser.FileFilter {
        @Override
        public boolean accept(File file) {
            // Allow only directories, or files with ".txt" extension
            return file.isDirectory() || file.getAbsolutePath().endsWith(".txt") 
                    || file.getAbsolutePath().endsWith(".xml") 
                    || file.getAbsolutePath().endsWith(".xmi");
        }
        
        @Override
        public String getDescription() {
            // This description will be displayed in the dialog,
            // hard-coded = ugly, should be done via I18N
            return "XMI files (*.xmi/xml/txt)";
        }
    }
        
    class textExtendName extends javax.swing.filechooser.FileFilter {
        @Override
        public boolean accept(File file) {
            // Allow only directories, or files with ".txt" extension
            return file.isDirectory() || file.getAbsolutePath().endsWith(".txt") 
                    || file.getAbsolutePath().endsWith(".xml") 
                    || file.getAbsolutePath().endsWith(".xmi");
        }
        
        @Override
        public String getDescription() {
            // This description will be displayed in the dialog,
            // hard-coded = ugly, should be done via I18N
            return "Text files (*.txt/xml/xmi)";
        }
    } 
    
        
        
    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    /** This is a substitute for FileNameExtensionFilter, which is
     * only available on Java SE 6.
     */
     
    private void chooseFileBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseFileBtnActionPerformed
        String [] row = null;
        FileFilter filters;
        JFileChooser fileChooser = new JFileChooser();
            
        filters = new xmiExtendName();
        fileChooser.setFileFilter(filters);
        int returnVal = fileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            xmiFileStr = "";
            File file = fileChooser.getSelectedFile();           
            xmiFileStr = file.getAbsolutePath();
            xmiFilename.setText(xmiFileStr);
        } else {
                System.out.println("File access cancelled by user.");
                }     
    }//GEN-LAST:event_chooseFileBtnActionPerformed

    private void extractTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_extractTextActionPerformed
        // TODO add your handling code here:
        String metaModelURL = "metamodel.xml";//sdmetrics";  // metamodel definition to use
	String xmiTransURL = "xmiTrans1_1.xml";   // XMI tranformations to use
	String xmiFile = xmiFilename.getText(); // XMI file with the UML model
        
        classnamesText.setLineWrap(true);
        if (xmiFile.isEmpty()== false) {

            XMLParser parser = null;
            try {
                parser = new XMLParser();
            } catch (Exception ex) {
                Logger.getLogger(TextMiningMetrics.class.getName()).log(Level.SEVERE, null, ex);
            }
            MetaModel metaModel = new MetaModel();
            try {
                parser.parse(metaModelURL, metaModel.getSAXParserHandler());
            } catch (Exception ex) {
                Logger.getLogger(TextMiningMetrics.class.getName()).log(Level.SEVERE, null, ex);
            }

            XMITransformations trans=new XMITransformations(metaModel);
            try {
                parser.parse(xmiTransURL, trans.getSAXParserHandler());
            } catch (Exception ex) {
                Logger.getLogger(TextMiningMetrics.class.getName()).log(Level.SEVERE, null, ex);
            }

            Model model = new Model(metaModel);
            XMIReader xmiReader = new XMIReader(trans, model);
            try {
                parser.parse(xmiFile, xmiReader);
            } catch (Exception ex) {
                Logger.getLogger(TextMiningMetrics.class.getName()).log(Level.SEVERE, null, ex);
            }

            String[] filters = { "#.java", "#.javax", "#.org.xml" };
            model.setFilter(filters, false, true);

            //iterate over all model element types in the metamodel
            for (MetaModelElement type : metaModel) {
                System.out.println("Elements of type: " + type.getName());

            // iterate over all model elements of the current type
                List<ModelElement> elements = model.getAcceptedElements(type);
                    for (ModelElement me : elements) {
                        int keywordCount = 0;
                        if (type.getName().matches("class")){
                            String stringa1 = me.getFullName();
                            String stringa2 = me.getName();
                            //classnamesText.append(stringa2 + ": ");
                            //printing the data
                            int dotIndex = stringa1.lastIndexOf(".");
                            int stringLength = stringa1.length();
                            
                            char[] char_arr = stringa1.toCharArray();
                            int count2 = dotIndex + 1;
                            int tempKeyword = 1;
                            String extClsName = "";
                            String subClsName = "";
                        
                        extractClassnameText.append(stringa2 + " : \n");
                        while (count2 < stringLength){
                        // if uppercase and character after is lowercase
                            if(Character.isUpperCase(char_arr[count2]) == true && 
                                    count2 != (stringLength - 1) && 
                                    Character.isLowerCase(char_arr[count2 + 1]) == true  ) {
                                classnamesText.append(" " + Character.toString(char_arr[count2]));
                                if (extClsName.isEmpty()){
                                    extClsName += Character.toString(char_arr[count2]);
                                    System.out.println(extClsName);
                                } else {
                                    subClsName = "";
                                    subClsName = extClsName;
                                    extractClassnameText.append(subClsName + "\n");
                                    tempKeyword += 1;
                                    extClsName = "";
                                    extClsName += Character.toString(char_arr[count2]);
                                }
                            }
                        // if uppercase and character before lower case, begin new line
                            else if(Character.isUpperCase(char_arr[count2]) == true && 
                                    Character.isLowerCase(char_arr[count2 - 1]) == true) {
                                classnamesText.append(" " + Character.toString(char_arr[count2]));
                                if (extClsName.isEmpty()){
                                    extClsName += Character.toString(char_arr[count2]);
                                    System.out.println(extClsName);
                                } else {
                                    subClsName = "";
                                    subClsName = extClsName;
                                    extractClassnameText.append(subClsName + "\n");
                                    tempKeyword += 1;
                                    extClsName = "";
                                    extClsName += Character.toString(char_arr[count2]);
                                }
                            }
                        // if uppercase and character before also uppercase
                            else if(Character.isUpperCase(char_arr[count2]) == true && 
                                    Character.isUpperCase(char_arr[count2 - 1]) == true) {
                                classnamesText.append(Character.toString(char_arr[count2]));
                                extClsName += Character.toString(char_arr[count2]);
                                System.out.println(extClsName);
                            }
                        // if lowercase
                            else if (Character.isLowerCase(char_arr[count2]) == true) {
                                classnamesText.append(Character.toString(char_arr[count2]));
                                extClsName += Character.toString(char_arr[count2]);
                                System.out.println(extClsName);
                            }
                            else {
                                classnamesText.append(" " + Character.toString(char_arr[count2]));
                                extClsName += Character.toString(char_arr[count2]);
                                System.out.println(extClsName);
                            }       
                         count2++;
                        }
                        System.out.println("After loop : " + extClsName);
                        keywordCount = tempKeyword;
                        extractClassnameText.append(extClsName);
                        extractClassnameText.append("\n");
                        //classnamesText.append("\n");
                        classnamesText.append(" ");
                        extractClassnameText.append(Integer.toString(keywordCount) + "\n");
                    }                   
               }
            }
	} else
                JOptionPane.showMessageDialog(null, "No XMI file selected");
    }//GEN-LAST:event_extractTextActionPerformed

    private void readClassMetricsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_readClassMetricsActionPerformed
        String command = "java -jar SDMetrics.jar -xmi " +  xmiFilename.getText()  + " -filter #.java -filter #.javax -filter #.org.xml -f csv data";
        Process process = null;
        try {
            String s;
            process = Runtime.getRuntime().exec(command); 
            BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(process.getInputStream()));
            while((s=bufferedReader.readLine()) != null)
            System.out.println(s);
            process.waitFor();
        } catch (IOException ex) {
            Logger.getLogger(ReverseDesignerApp.class.getName()).log(Level.SEVERE, null, ex);
        }   catch (InterruptedException ex) {
                Logger.getLogger(ReverseDesignerApp.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_readClassMetricsActionPerformed

    private void csvFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_csvFileActionPerformed
        // TODO add your handling code here:
        String [] row = null;
        String csvFileStr = "";
        FileFilter filters;
        JFileChooser fileChooser = new JFileChooser();
            
        filters = new csvExtendName();
        fileChooser.setFileFilter(filters);
        int returnVal = fileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            csvFileStr = "";
            File file = fileChooser.getSelectedFile();           
            csvFileStr = file.getAbsolutePath();
            csvFileName.setText(csvFileStr);
        } else {
                System.out.println("File access cancelled by user.");
                }     
    }//GEN-LAST:event_csvFileActionPerformed

    private void readCSVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_readCSVActionPerformed
        CSVReader csvReader = null;
        classnamesText.setLineWrap(true);
        
        String csvFilename = "";
        csvFilename = csvFileName.getText();
        String [] row = null;
        
        try {
            // TODO add your handling code here:
            
            List<String> classListLocal = new ArrayList<>();

            if (csvFilename.isEmpty() == false) {
                try {
                    csvReader = new CSVReader (new FileReader(csvFilename));
                    try {
                        row = csvReader.readNext();
                    } catch (IOException ex) {
                        Logger.getLogger(TextMiningMetrics.class.getName()).log(Level.SEVERE, null, ex);
                    }
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(TextMiningMetrics.class.getName()).log(Level.SEVERE, null, ex);
                }

            int count = 0;
 
            while ((row = csvReader.readNext()) != null){
                int lastDotIndex = row[0].lastIndexOf(".") + 1;
                classListLocal.add(row[0].substring(lastDotIndex));
                System.out.println(count + " class name :" + classListLocal.get(count));
                String stringa1 = row[0];
                System.out.println("Stringa1 :" + stringa1); //printing the data
                int dotIndex = stringa1.lastIndexOf(".");
                System.out.println("dotIndex : " + dotIndex);
                int stringLength = stringa1.length();
                char[] char_arr = stringa1.toCharArray();
                int count2 = dotIndex + 1;
                System.out.println("count2 : " + count2);
                
                while (count2 < stringLength){
                 // if uppercase and character after is lowercase
                    System.out.println("count2 : " + count2);
                    if(Character.isUpperCase(char_arr[count2]) == true && count2 != (stringLength - 1) &&
                       Character.isLowerCase(char_arr[count2 + 1]) == true  ) {
                       classnamesText.append(" " + Character.toString(char_arr[count2]));
                       }
                     // if uppercase, not first character and character before lower case, add space
                     else if(Character.isUpperCase(char_arr[count2]) == true && Character.isLowerCase(char_arr[count2 - 1]) == true) {
                       classnamesText.append(" " + Character.toString(char_arr[count2]));
                       }
                      // if uppercase and character before also uppercase
                     else if(Character.isUpperCase(char_arr[count2]) == true && Character.isUpperCase(char_arr[count2 - 1]) == true) {
                       classnamesText.append(Character.toString(char_arr[count2]));
                       }
                      // if lowercase
                     else if (Character.isLowerCase(char_arr[count2]) == true) {
                        classnamesText.append(Character.toString(char_arr[count2]));
                        }
                        else
                           classnamesText.append(" " + Character.toString(char_arr[count2]));
                        count2++;
                        }
                  count++;
                  }              
            }

            try {
                csvReader.close();
            } catch (IOException ex) {
                Logger.getLogger(TextMiningMetrics.class.getName()).log(Level.SEVERE, null, ex);
                }
            } catch (IOException ex) {
            Logger.getLogger(TextMiningMetrics.class.getName()).log(Level.SEVERE, null, ex);
            }
    }//GEN-LAST:event_readCSVActionPerformed

    private void saveTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveTextActionPerformed
        // TODO add your handling code here:
    PrintStream out = null;
    String textFileStr = "";
    
    FileFilter filters;
    JFileChooser fileChooser = new JFileChooser();
            
    filters = new csvExtendName();
    fileChooser.setFileFilter(filters);
       int returnVal = fileChooser.showSaveDialog(this);
       if (returnVal == JFileChooser.APPROVE_OPTION) {
           File file = fileChooser.getSelectedFile();           
           textFileStr = file.getAbsolutePath();
           csvFileName.setText(textFileStr);
       } else {
           System.out.println("File access cancelled by user.");
           }    
    
      if (textFileStr.isEmpty() == false){
          try {
            try {
                out = new PrintStream(new FileOutputStream(csvFileName.getText()));
            } catch (FileNotFoundException ex) {
                Logger.getLogger(TextMiningMetrics.class.getName()).log(Level.SEVERE, null, ex);
            }
            if (classnamesText.getText().isEmpty() == false){
                out.print(classnamesText.getText());
            }
        }
        finally {
            if (out != null) out.close();
            }
        }
       
    }//GEN-LAST:event_saveTextActionPerformed

    private void clearBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearBtnActionPerformed
          classnamesText.setText(null);
    }//GEN-LAST:event_clearBtnActionPerformed

     
    public void textProcess(String inputCsv, String masterTextFile, int selectProj, int inputTypeSel){
        
        CSVReader csvReader = null;
        CSVReader csvReadProj = null;
        String csvFilename = "";
        String csvProjName = "";
        csvFilename = masterTextFile;
        csvProjName = inputCsv;
        String inputName = "";
        String[] row = null;
        String[] rowInput = null;
        List<String[]> textMetrics  =  new ArrayList<String[]>();   
        
        // initialize - put topic in csv document
        TextMetricsCalculator textInit = new TextMetricsCalculator();
        textMetrics.add(textInit.initMetrics(inputTypeSel));
                
        if (csvProjName.isEmpty() == false && csvFilename.isEmpty() == false) {          
        try {
            csvReadProj = new CSVReader (new FileReader(csvProjName));
            try {
                rowInput = csvReadProj.readNext();
                } catch (IOException ex) {
                    Logger.getLogger(TextMiningMetrics.class.getName()).log(Level.SEVERE, null, ex);
                }
            } catch (FileNotFoundException ex) {
                Logger.getLogger(TextMiningMetrics.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                while ((rowInput = csvReadProj.readNext()) != null){
                    String inputStr = rowInput[0];          
                    String[][] arrayWords = new String[20][60];
                    TextMetricsCalculator textCal = new TextMetricsCalculator();
                    arrayWords = textCal.classNameExtract(inputStr);
                    
                    int loopCount = 0;
                    while (arrayWords[loopCount][0] != null){
                        String keyName = arrayWords[loopCount][0].toLowerCase();
                        int count = keyName.length();
                        int breaker = 1;
                        
                        if (keyName.endsWith("y")== true){
                            keyName = keyName.substring(0, keyName.length() - 1) + "i";
                        }
                        
                        while (count > 0 && breaker == 1){
                            try {
                                csvReader = new CSVReader (new FileReader(csvFilename));
                                try {
                                    row = csvReader.readNext();
                                } catch (IOException ex) {
                                    Logger.getLogger(TextMiningMetrics.class.getName()).log(Level.SEVERE, null, ex);
                                }
                            } catch (FileNotFoundException ex) {
                               Logger.getLogger(TextMiningMetrics.class.getName()).log(Level.SEVERE, null, ex);
                            }
                                                                        
                        while ((row = csvReader.readNext()) != null){                               
                            if (row[0].equalsIgnoreCase(keyName)){ //
                              arrayWords[loopCount][1] = row[1];
                              arrayWords[loopCount][2] = row[2];
                              //arrayWords[loopCount][3] = row[list1.getSelectedIndex()+ 3];
                              arrayWords[loopCount][3] = row[selectProj + 3];
                              breaker = 0;
                              break;
                            }                    
                        }
                        try {
                            csvReader.close();
                            } catch (IOException ex) {
                                Logger.getLogger(TextMiningMetrics.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        count--;
                        keyName = keyName.substring(0, count);
                        }
                    loopCount++;
                    }
                    //textMetrics.add(textCal.calcMetrics(inputStr, arrayWords, loopCount, csvProjName, list1.getSelectedIndex()));                                    
                    if (inputTypeSel == 3){
                        textMetrics.add(textCal.calcMetrics(inputStr, arrayWords, loopCount, csvProjName, selectProj));                                    
                        }
                    else if (inputTypeSel == 2){
                        textMetrics.add(textCal.calcDesignMetrics(inputStr, csvProjName));
                        }
                    else if (inputTypeSel == 1){
                        textMetrics.add(textCal.calcTextMetrics(inputStr, arrayWords, loopCount, csvProjName, selectProj));
                        }
                    }                    
                } catch (IOException ex) {
                Logger.getLogger(TextMiningMetrics.class.getName()).log(Level.SEVERE, null, ex);
            }
        }  
        int count3 = 0;
        while (count3 < textMetrics.size() - 1){
            String[] arrayMetrics = null; 
            arrayMetrics = textMetrics.get(count3);
            int count4 = 0;
                while (count4 < arrayMetrics.length - 1){
                    classnamesText.append(arrayMetrics[count4] + " ");
                    count4++;
                }
                classnamesText.append("\n");
            count3++;
        }
        try {
            csvFileWriter(textMetrics, inputCsv);
        } catch (IOException ex) {
            Logger.getLogger(TextMiningMetrics.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void testSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_testSearchActionPerformed

   //     textProcess(csvInput.getText(), csvFileName.getText(), list1.getSelectedIndex());
    }//GEN-LAST:event_testSearchActionPerformed

    private void csvFileNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_csvFileNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_csvFileNameActionPerformed

    private void selInputBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selInputBtnActionPerformed
        String csvFileStr = "";
        FileFilter filters;
        JFileChooser fileChooser = new JFileChooser();
            
        filters = new csvExtendName();
        fileChooser.setFileFilter(filters);
        int returnVal = fileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            csvFileStr = "";
            File file = fileChooser.getSelectedFile();           
            csvFileStr = file.getAbsolutePath();
            csvInput.setText(csvFileStr);
        } else {
                System.out.println("File access cancelled by user.");
        }     
    }//GEN-LAST:event_selInputBtnActionPerformed

    private void selectProjectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectProjectActionPerformed
        // TODO add your handling code here:
        String [] row = null;
        String csvFileStr = csvFileName.getText();
        FileFilter filters;
        JFileChooser fileChooser = new JFileChooser();
        CSVReader csvReadProj = null;
        String[] rowInput = null;
                 
        try {
            if (csvFileStr != ""){
                csvReadProj = new CSVReader (new FileReader(csvFileStr));
                try {
                    rowInput = csvReadProj.readNext();
                } catch (IOException ex) {
                        Logger.getLogger(TextMiningMetrics.class.getName()).log(Level.SEVERE, null, ex);
                    }
            }
            } catch (FileNotFoundException ex) {
                Logger.getLogger(TextMiningMetrics.class.getName()).log(Level.SEVERE, null, ex);
            }
        int count = 3;   
        System.out.println(rowInput.length);
        while (count <= rowInput.length - 1){            
            list1.add(rowInput[count]);
            count++;
        }   
    }//GEN-LAST:event_selectProjectActionPerformed

    private void csvInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_csvInputActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_csvInputActionPerformed

    private void list1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_list1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_list1ActionPerformed

    private void list1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_list1KeyPressed
        // TODO add your handling code here:
       System.out.println("in list : " + list1.getSelectedIndex());
    }//GEN-LAST:event_list1KeyPressed

    private void testWriter(List<String[]> data) throws IOException{
        String csvFileStr = "C:\\outputCSV.csv";
        FileFilter filters;
        JFileChooser fileChooser = new JFileChooser();
        
            
        filters = new csvExtendName();
        fileChooser.setFileFilter(filters);
        int returnVal = fileChooser.showSaveDialog(this);
        
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            csvFileStr = "";
            File file = fileChooser.getSelectedFile();           
            csvFileStr = file.getAbsolutePath();
        } else {
                System.out.println("File access cancelled by user.");
        }
        
        try (CSVWriter writer = new CSVWriter(new FileWriter(csvFileStr))) {
            writer.writeAll(data);
        }
    }

    private void csvFileWriter (List<String[]> data, String inputCsv) throws IOException{
        String csvFileStr = inputCsv;
        
        try (CSVWriter writer = new CSVWriter(new FileWriter(csvFileStr))) {
            writer.writeAll(data);
            System.out.println("Writing text information successful...");
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TextMiningMetrics.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TextMiningMetrics.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TextMiningMetrics.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TextMiningMetrics.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TextMiningMetrics().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JButton chooseFileBtn;
    private javax.swing.JTextArea classnamesText;
    private javax.swing.JButton clearBtn;
    private javax.swing.JMenuItem contentsMenuItem;
    private javax.swing.JMenuItem copyMenuItem;
    private javax.swing.JButton csvFile;
    private javax.swing.JTextField csvFileName;
    private javax.swing.JTextField csvInput;
    private javax.swing.JMenuItem cutMenuItem;
    private javax.swing.JMenuItem deleteMenuItem;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JTextArea extractClassnameText;
    private javax.swing.JButton extractText;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JScrollPane fullClassnameText;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JScrollPane jScrollPane1;
    private java.awt.List list1;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JMenuItem pasteMenuItem;
    private javax.swing.JButton readCSV;
    private javax.swing.JButton readClassMetrics;
    private javax.swing.JMenuItem saveAsMenuItem;
    private javax.swing.JMenuItem saveMenuItem;
    private javax.swing.JButton saveText;
    private javax.swing.JButton selInputBtn;
    private javax.swing.JButton selectProject;
    private javax.swing.JButton testSearch;
    private javax.swing.JPanel textPanel;
    private javax.swing.JTextField xmiFilename;
    // End of variables declaration//GEN-END:variables
}
