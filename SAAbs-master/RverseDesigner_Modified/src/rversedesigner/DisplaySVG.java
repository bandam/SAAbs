/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package rversedesigner;

import java.awt.*;
import java.awt.event.*;
import java.io.*;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.*;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileFilter;
import java.io.File;

import au.com.bytecode.opencsv.CSVReader;
import org.apache.batik.swing.JSVGCanvas;
import org.apache.batik.swing.svg.SVGDocumentLoaderAdapter;
import org.apache.batik.swing.svg.SVGDocumentLoaderEvent;
import org.apache.batik.swing.svg.GVTTreeBuilderAdapter;
import org.apache.batik.swing.svg.GVTTreeBuilderEvent;
/**
 *
 * @author Hafeez
 */
public class DisplaySVG extends javax.swing.JFrame {
    /**
     * Creates new form DisplaySVG
     */
    protected JSVGCanvas svgCanvas = new JSVGCanvas();
    protected JFrame frame;
    protected static List<String> classListLocal = new ArrayList<>();
    protected static String plantUMLLocal;
    protected static String plantUMLOperation;
    protected static String plantUMLAttribute;
    protected static String plantUMLClass;
    protected static String plantUMLGS;
    protected static String rankingFilename = "";
    
        class xmiExtendName extends javax.swing.filechooser.FileFilter {
        @Override
        public boolean accept(File file) {
            // Allow only directories, or files with ".txt" extension
            return file.isDirectory() || file.getAbsolutePath().endsWith(".txt") 
                    || file.getAbsolutePath().endsWith(".xls") 
                    || file.getAbsolutePath().endsWith(".csv");
        }
        
        @Override
        public String getDescription() {
            // This description will be displayed in the dialog,
            // hard-coded = ugly, should be done via I18N
            return "XMI files (*.xls/csv/txt)";
        }
    } 
        
public DisplaySVG (JFrame f, String plantUMLScript, List<String> classList, String OpsUML, String AttrUML, String ClsUML, String GSUML){
        frame = f;          
        classListLocal = classList;
        plantUMLLocal = plantUMLScript;
        plantUMLOperation = OpsUML;
        plantUMLAttribute = AttrUML;
        plantUMLClass = ClsUML;
        plantUMLGS = GSUML;
}
           
public JComponent createComponents() {
        initComponents();
              
        final JPanel panel = new JPanel(new BorderLayout());
        //String path = getClass().getClassLoader().getResource(".").getPath();
        JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT));
         
        frame.add("North", option);
        p.add(ResetPosition);
        p.add(classRanking);
        p.add(slider);
        p.add(sliderValue);
        p.add(label);
        p.add(progress);
        
        panel.add("North", p);
        panel.add("Center", svgCanvas);
           
        svgCanvas.setOpaque(true);
        svgCanvas.setPreferredSize(new Dimension(200, 200));
        svgCanvas.setSize(200, 300);
        svgCanvas.setURI("file:" + /*path + */ "image2.svg");
                
        // Set the JSVGCanvas listeners.
        svgCanvas.addSVGDocumentLoaderListener(new SVGDocumentLoaderAdapter() {
            public void documentLoadingStarted(SVGDocumentLoaderEvent e) {
                label.setText("Status : Document Loading...");
                progress.setValue(20);
                progress.setStringPainted(true);
            }
            public void documentLoadingCompleted(SVGDocumentLoaderEvent e) {
                label.setText("Status : Document Loaded.");
                progress.setValue(50);
                progress.setStringPainted(true);
            }
        });

        svgCanvas.addGVTTreeBuilderListener(new GVTTreeBuilderAdapter() {
            public void gvtBuildStarted(GVTTreeBuilderEvent e) {
                label.setText("Status : Build Started...");
                progress.setValue(70);
                progress.setStringPainted(true);
            }
            public void gvtBuildCompleted(GVTTreeBuilderEvent e) {
                label.setText("Status : Build Done.");
                progress.setValue(100);
                progress.setStringPainted(true);
                progress.setValue(0);
                progress.setStringPainted(true);
                frame.setExtendedState(JFrame.MAXIMIZED_BOTH);
            }
        });
        return panel;
    }
       
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        rankClassDisplayMenu = new javax.swing.ButtonGroup();
        DisplayUML = new javax.swing.JPanel();
        fileChooser = new javax.swing.JFileChooser();
        ResetPosition = new javax.swing.JButton();
        label = new javax.swing.JLabel();
        slider = new javax.swing.JSlider();
        sliderValue = new javax.swing.JTextField();
        try {
            classRanking =(javax.swing.JButton)java.beans.Beans.instantiate(getClass().getClassLoader(), "rversedesigner.DisplaySVG_classRanking");
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        } catch (java.io.IOException e) {
            e.printStackTrace();
        }
        progress = new javax.swing.JProgressBar();
        option = new javax.swing.JMenuBar();
        setting = new javax.swing.JMenu();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        attributeName = new javax.swing.JCheckBoxMenuItem();
        operationName = new javax.swing.JCheckBoxMenuItem();
        gettersSettersOut = new javax.swing.JCheckBoxMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        classRankMenu = new javax.swing.JMenu();
        hideClass = new javax.swing.JRadioButtonMenuItem();
        colorClassRank = new javax.swing.JRadioButtonMenuItem();
        graduallyColor = new javax.swing.JRadioButtonMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        gradualColorAll = new javax.swing.JRadioButtonMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("SAAbs Viewer");
        setAutoRequestFocus(false);
        setName("UMLDisplay"); // NOI18N
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        DisplayUML.setName("DisplayPanel"); // NOI18N
        DisplayUML.setPreferredSize(new java.awt.Dimension(1280, 465));

        fileChooser.setDialogTitle("Choose your ranking file");
        fileChooser.setDoubleBuffered(true);
        fileChooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileChooserActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout DisplayUMLLayout = new javax.swing.GroupLayout(DisplayUML);
        DisplayUML.setLayout(DisplayUMLLayout);
        DisplayUMLLayout.setHorizontalGroup(
            DisplayUMLLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(DisplayUMLLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(fileChooser, javax.swing.GroupLayout.DEFAULT_SIZE, 574, Short.MAX_VALUE)
                .addContainerGap(583, Short.MAX_VALUE))
        );
        DisplayUMLLayout.setVerticalGroup(
            DisplayUMLLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, DisplayUMLLayout.createSequentialGroup()
                .addContainerGap(131, Short.MAX_VALUE)
                .addComponent(fileChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 141, Short.MAX_VALUE)
                .addContainerGap())
        );

        ResetPosition.setText("Reset Position");
        ResetPosition.setDoubleBuffered(true);
        ResetPosition.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ResetPositionActionPerformed(evt);
            }
        });

        label.setText("Label");

        slider.setMajorTickSpacing(10);
        slider.setMinorTickSpacing(2);
        slider.setPaintLabels(true);
        slider.setPaintTicks(true);
        slider.setValue(100);
        slider.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        slider.setDoubleBuffered(true);
        slider.setPreferredSize(new java.awt.Dimension(300, 47));
        slider.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                sliderMouseReleased(evt);
            }
        });
        slider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderStateChanged(evt);
            }
        });

        sliderValue.setText("100");

        classRanking.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                classRankingActionPerformed(evt);
            }
        });

        setting.setText("Setting");
        setting.add(jSeparator1);

        attributeName.setSelected(true);
        attributeName.setText("Attribute Name");
        attributeName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                attributeNameActionPerformed(evt);
            }
        });
        setting.add(attributeName);

        operationName.setSelected(true);
        operationName.setText("Operation Name");
        operationName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                operationNameActionPerformed(evt);
            }
        });
        setting.add(operationName);

        gettersSettersOut.setText("Getters/Setters");
        gettersSettersOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gettersSettersOutActionPerformed(evt);
            }
        });
        setting.add(gettersSettersOut);
        setting.add(jSeparator2);

        classRankMenu.setText("Ranking Classes Display");

        rankClassDisplayMenu.add(hideClass);
        hideClass.setSelected(true);
        hideClass.setText("Hide Classes");
        classRankMenu.add(hideClass);

        rankClassDisplayMenu.add(colorClassRank);
        colorClassRank.setText("Color Classes");
        classRankMenu.add(colorClassRank);

        rankClassDisplayMenu.add(graduallyColor);
        graduallyColor.setText("Gradually Color Classes");
        classRankMenu.add(graduallyColor);
        classRankMenu.add(jSeparator3);

        rankClassDisplayMenu.add(gradualColorAll);
        gradualColorAll.setText("All Classes Gradual Colors");
        gradualColorAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gradualColorAllActionPerformed(evt);
            }
        });
        classRankMenu.add(gradualColorAll);

        setting.add(classRankMenu);

        option.add(setting);

        setJMenuBar(option);
        option.getAccessibleContext().setAccessibleParent(this);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(classRanking)
                            .addComponent(ResetPosition))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(slider, javax.swing.GroupLayout.PREFERRED_SIZE, 443, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sliderValue, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(label)
                        .addGap(31, 31, 31)
                        .addComponent(progress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(354, 354, 354)
                        .addComponent(DisplayUML, javax.swing.GroupLayout.PREFERRED_SIZE, 1179, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(962, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(ResetPosition)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(classRanking))
                    .addComponent(slider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(progress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(sliderValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(label)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 310, Short.MAX_VALUE)
                .addComponent(DisplayUML, 283, 283, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(117, 117, 117))
        );

        DisplayUML.getAccessibleContext().setAccessibleParent(DisplayUML);
        label.getAccessibleContext().setAccessibleParent(DisplayUML);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private void sliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderStateChanged
    }//GEN-LAST:event_sliderStateChanged

    private void ResetPositionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ResetPositionActionPerformed
        svgCanvas.resetRenderingTransform();                            
    }//GEN-LAST:event_ResetPositionActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        // TODO add your handling code here:
    }//GEN-LAST:event_formWindowClosed

    private void classRankingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_classRankingActionPerformed

        try {                                             
            // TODO add your handling code here:
            String [] row = null;
            FileFilter filters;
            
            filters = new xmiExtendName();
            fileChooser.setFileFilter(filters);
            int returnVal = fileChooser.showOpenDialog(this);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                rankingFilename = "";
                File file = fileChooser.getSelectedFile();           
                rankingFilename = file.getAbsolutePath();
            } else {
                System.out.println("File access cancelled by user.");
            }
            
            CSVReader csvReader = null;
            try {
                csvReader = new CSVReader (new FileReader(rankingFilename));
                try {
                    row = csvReader.readNext();
                } catch (IOException ex) {
                    Logger.getLogger(DisplaySVG.class.getName()).log(Level.SEVERE, null, ex);
                }
            } catch (FileNotFoundException ex) {
                Logger.getLogger(DisplaySVG.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            classListLocal.clear();
   
            int count = 0;            
            
            while ((row = csvReader.readNext()) != null){
                int lastDotIndex = row[0].lastIndexOf(".") + 1;
                row[0] = row[0].substring(lastDotIndex);
                classListLocal.add(row[0]);
                System.out.println(count + " class name :" + classListLocal.get(count));
                count++;
            }
            
            try {
                csvReader.close();
            } catch (IOException ex) {
                Logger.getLogger(DisplaySVG.class.getName()).log(Level.SEVERE, null, ex);
            }
            
        } catch (IOException ex) {
            Logger.getLogger(DisplaySVG.class.getName()).log(Level.SEVERE, null, ex);
        }  
    }//GEN-LAST:event_classRankingActionPerformed

    private void fileChooserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileChooserActionPerformed
    }//GEN-LAST:event_fileChooserActionPerformed

    private void attributeNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_attributeNameActionPerformed
        
    if (attributeName.isSelected() == false){
        if (operationName.isSelected() == false && gettersSettersOut.isSelected() == false){
            processView("@startuml \n" + plantUMLClass);
        } 
        else {
            processView("@startuml \n" + plantUMLAttribute);
        }
    }    
    if (attributeName.isSelected() == true){
        if (operationName.isSelected() == true || gettersSettersOut.isSelected() == false){
            processView(plantUMLLocal);
            //System.out.println("plantUMLLocal : " + plantUMLLocal);
        } else if(operationName.isSelected() == true || gettersSettersOut.isSelected() == true){
            processView("@startuml \n" + plantUMLGS);
        } 
        else {
            processView("@startuml \n" + plantUMLOperation);
        }
    }    
        
    }//GEN-LAST:event_attributeNameActionPerformed

    private void operationNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_operationNameActionPerformed
        
    if (operationName.isSelected() == false){
        if (attributeName.isSelected() == false || gettersSettersOut.isSelected() == false){
            processView("@startuml \n" + plantUMLClass);
        } 
    else{
            processView("@startuml \n" + plantUMLOperation);
        } 
    }
    
    if (operationName.isSelected() == true){
        if (attributeName.isSelected() == true){
            processView(plantUMLLocal);
        } 
        else if (gettersSettersOut.isSelected() == true) {
            processView("@startuml \n" + plantUMLGS);
        }
        else {
            processView("@startuml \n" + plantUMLAttribute);
        }
    }        
    }//GEN-LAST:event_operationNameActionPerformed

    private void gradualColorAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gradualColorAllActionPerformed
        processView(plantUMLLocal);
    }//GEN-LAST:event_gradualColorAllActionPerformed

    private void sliderMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sliderMouseReleased
        // TODO add your handling code here:
        if (operationName.isSelected() == false){
            if (attributeName.isSelected() == false){
                processView("@startuml \n" + plantUMLClass);
            } else {
            processView("@startuml \n" + plantUMLOperation);
        } 
        }

        if (operationName.isSelected() == true){
             if (attributeName.isSelected() == true && gettersSettersOut.isSelected() == true){
                processView("@startuml \n" + plantUMLGS);
            }
             else if (attributeName.isSelected() == true && gettersSettersOut.isSelected() == false){
                processView(plantUMLLocal);
             }
        else{
            processView("@startuml \n" + plantUMLAttribute);    
        }
        }
    }//GEN-LAST:event_sliderMouseReleased

    private void gettersSettersOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gettersSettersOutActionPerformed
       
    if (gettersSettersOut.isSelected() == true){
        if (operationName.isSelected() == true && attributeName.isSelected() == true){
          processView("@startuml \n"  +  plantUMLGS); 
          //System.out.println("@startuml \n"  +  plantUMLGS + " \n " + plantUMLAttribute);
        } else if(operationName.isSelected() == true){
          processView("@startuml \n" + plantUMLGS ); 
           }
    } else if (gettersSettersOut.isSelected() == false && operationName.isSelected() == true 
            && attributeName.isSelected() == true){
        processView(plantUMLLocal);
    }
    }//GEN-LAST:event_gettersSettersOutActionPerformed
    
    private void processView(String UMLScript) {
        double maxPos = 0.0;
        int maxPosInt = 0;
        int currPos = 0;
        int dispType = 0;
        String path = getClass().getClassLoader().getResource(".").getPath();
        String test = "";
                
        sliderValue.setText(" ");
        sliderValue.setText(Integer.toString(slider.getValue()));        
               
        currPos = 100 - slider.getValue();
        maxPos = classListLocal.size() * (currPos * 0.01) ;
        System.out.println(Double.toString(maxPos));
        maxPosInt = (int) maxPos;
        
        dispType = displayType();
        System.out.println("This is display : -------- " + dispType + " -------- ");
        
        try {
            // TODO add your handling code here:
            PaintUML P = new PaintUML();
            try {
                P.convertToPlantUMLSlider(UMLScript, classListLocal, maxPosInt, dispType);
            } catch (InterruptedException ex) {
                Logger.getLogger(ReverseDesignerApp.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (IOException ex) {
            Logger.getLogger(ReverseDesignerApp.class.getName()).log(Level.SEVERE, null, ex);
        } 
        svgCanvas.setURI("file:" + path + "image3.svg");      
    }
    
    /**
     * @param args the command line arguments
     */
    public int displayType (){
        int displayInt = 0;
        
        if (hideClass.isSelected() == true){
            displayInt = 1;
        }
        if (colorClassRank.isSelected() == true){
            displayInt = 2;
        }
        if (graduallyColor.isSelected() == true){
            displayInt = 3;
        }
        if (gradualColorAll.isSelected() == true){
            displayInt = 4;
        }
            
    return displayInt;
    }
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DisplaySVG.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DisplaySVG.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DisplaySVG.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DisplaySVG.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        JFrame f = new JFrame("Display SVG");
        
        DisplaySVG app = new DisplaySVG(f, plantUMLLocal, classListLocal, plantUMLAttribute, 
                plantUMLOperation, plantUMLClass, plantUMLGS );
        // Add components to the frame.
        f.getContentPane().add(app.createComponents());
        
        // Display the frame.     
        f.addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {
               System.exit(0);
            }
        });
    }
        
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel DisplayUML;
    private javax.swing.JButton ResetPosition;
    private javax.swing.JCheckBoxMenuItem attributeName;
    private javax.swing.JMenu classRankMenu;
    private javax.swing.JButton classRanking;
    private javax.swing.JRadioButtonMenuItem colorClassRank;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JCheckBoxMenuItem gettersSettersOut;
    private javax.swing.JRadioButtonMenuItem gradualColorAll;
    private javax.swing.JRadioButtonMenuItem graduallyColor;
    private javax.swing.JRadioButtonMenuItem hideClass;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JLabel label;
    private javax.swing.JCheckBoxMenuItem operationName;
    private javax.swing.JMenuBar option;
    private javax.swing.JProgressBar progress;
    private javax.swing.ButtonGroup rankClassDisplayMenu;
    private javax.swing.JMenu setting;
    private javax.swing.JSlider slider;
    private javax.swing.JTextField sliderValue;
    // End of variables declaration//GEN-END:variables
}
